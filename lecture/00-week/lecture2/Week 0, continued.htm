<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="AsciiDoc 8.6.8">
<title>Week 0, continued</title>
<style type="text/css">
/* Shared CSS for AsciiDoc xhtml11 and html5 backends */

/* Default font. */
body {
  font-family: Georgia,serif;
}

/* Title font. */
h1, h2, h3, h4, h5, h6,
div.title, caption.title,
thead, p.table.header,
#toctitle,
#author, #revnumber, #revdate, #revremark,
#footer {
  font-family: Arial,Helvetica,sans-serif;
}

body {
  margin: 1em 5% 1em 5%;
}

a {
  color: blue;
  text-decoration: underline;
}
a:visited {
  color: fuchsia;
}

em {
  font-style: italic;
  color: navy;
}

strong {
  font-weight: bold;
  color: #083194;
}

h1, h2, h3, h4, h5, h6 {
  color: #527bbd;
  margin-top: 1.2em;
  margin-bottom: 0.5em;
  line-height: 1.3;
}

h1, h2, h3 {
  border-bottom: 2px solid silver;
}
h2 {
  padding-top: 0.5em;
}
h3 {
  float: left;
}
h3 + * {
  clear: left;
}
h5 {
  font-size: 1.0em;
}

div.sectionbody {
  margin-left: 0;
}

hr {
  border: 1px solid silver;
}

p {
  margin-top: 0.5em;
  margin-bottom: 0.5em;
}

ul, ol, li > p {
  margin-top: 0;
}
ul > li     { color: #aaa; }
ul > li > * { color: black; }

.monospaced, code, pre {
  font-family: "Courier New", Courier, monospace;
  font-size: inherit;
  color: navy;
  padding: 0;
  margin: 0;
}


#author {
  color: #527bbd;
  font-weight: bold;
  font-size: 1.1em;
}
#email {
}
#revnumber, #revdate, #revremark {
}

#footer {
  font-size: small;
  border-top: 2px solid silver;
  padding-top: 0.5em;
  margin-top: 4.0em;
}
#footer-text {
  float: left;
  padding-bottom: 0.5em;
}
#footer-badges {
  float: right;
  padding-bottom: 0.5em;
}

#preamble {
  margin-top: 1.5em;
  margin-bottom: 1.5em;
}
div.imageblock, div.exampleblock, div.verseblock,
div.quoteblock, div.literalblock, div.listingblock, div.sidebarblock,
div.admonitionblock {
  margin-top: 1.0em;
  margin-bottom: 1.5em;
}
div.admonitionblock {
  margin-top: 2.0em;
  margin-bottom: 2.0em;
  margin-right: 10%;
  color: #606060;
}

div.content { /* Block element content. */
  padding: 0;
}

/* Block element titles. */
div.title, caption.title {
  color: #527bbd;
  font-weight: bold;
  text-align: left;
  margin-top: 1.0em;
  margin-bottom: 0.5em;
}
div.title + * {
  margin-top: 0;
}

td div.title:first-child {
  margin-top: 0.0em;
}
div.content div.title:first-child {
  margin-top: 0.0em;
}
div.content + div.title {
  margin-top: 0.0em;
}

div.sidebarblock > div.content {
  background: #ffffee;
  border: 1px solid #dddddd;
  border-left: 4px solid #f0f0f0;
  padding: 0.5em;
}

div.listingblock > div.content {
  border: 1px solid #dddddd;
  border-left: 5px solid #f0f0f0;
  background: #f8f8f8;
  padding: 0.5em;
}

div.quoteblock, div.verseblock {
  padding-left: 1.0em;
  margin-left: 1.0em;
  margin-right: 10%;
  border-left: 5px solid #f0f0f0;
  color: #888;
}

div.quoteblock > div.attribution {
  padding-top: 0.5em;
  text-align: right;
}

div.verseblock > pre.content {
  font-family: inherit;
  font-size: inherit;
}
div.verseblock > div.attribution {
  padding-top: 0.75em;
  text-align: left;
}
/* DEPRECATED: Pre version 8.2.7 verse style literal block. */
div.verseblock + div.attribution {
  text-align: left;
}

div.admonitionblock .icon {
  vertical-align: top;
  font-size: 1.1em;
  font-weight: bold;
  text-decoration: underline;
  color: #527bbd;
  padding-right: 0.5em;
}
div.admonitionblock td.content {
  padding-left: 0.5em;
  border-left: 3px solid #dddddd;
}

div.exampleblock > div.content {
  border-left: 3px solid #dddddd;
  padding-left: 0.5em;
}

div.imageblock div.content { padding-left: 0; }
span.image img { border-style: none; }
a.image:visited { color: white; }

dl {
  margin-top: 0.8em;
  margin-bottom: 0.8em;
}
dt {
  margin-top: 0.5em;
  margin-bottom: 0;
  font-style: normal;
  color: navy;
}
dd > *:first-child {
  margin-top: 0.1em;
}

ul, ol {
    list-style-position: outside;
}
ol.arabic {
  list-style-type: decimal;
}
ol.loweralpha {
  list-style-type: lower-alpha;
}
ol.upperalpha {
  list-style-type: upper-alpha;
}
ol.lowerroman {
  list-style-type: lower-roman;
}
ol.upperroman {
  list-style-type: upper-roman;
}

div.compact ul, div.compact ol,
div.compact p, div.compact p,
div.compact div, div.compact div {
  margin-top: 0.1em;
  margin-bottom: 0.1em;
}

tfoot {
  font-weight: bold;
}
td > div.verse {
  white-space: pre;
}

div.hdlist {
  margin-top: 0.8em;
  margin-bottom: 0.8em;
}
div.hdlist tr {
  padding-bottom: 15px;
}
dt.hdlist1.strong, td.hdlist1.strong {
  font-weight: bold;
}
td.hdlist1 {
  vertical-align: top;
  font-style: normal;
  padding-right: 0.8em;
  color: navy;
}
td.hdlist2 {
  vertical-align: top;
}
div.hdlist.compact tr {
  margin: 0;
  padding-bottom: 0;
}

.comment {
  background: yellow;
}

.footnote, .footnoteref {
  font-size: 0.8em;
}

span.footnote, span.footnoteref {
  vertical-align: super;
}

#footnotes {
  margin: 20px 0 20px 0;
  padding: 7px 0 0 0;
}

#footnotes div.footnote {
  margin: 0 0 5px 0;
}

#footnotes hr {
  border: none;
  border-top: 1px solid silver;
  height: 1px;
  text-align: left;
  margin-left: 0;
  width: 20%;
  min-width: 100px;
}

div.colist td {
  padding-right: 0.5em;
  padding-bottom: 0.3em;
  vertical-align: top;
}
div.colist td img {
  margin-top: 0.3em;
}

@media print {
  #footer-badges { display: none; }
}

#toc {
  margin-bottom: 2.5em;
}

#toctitle {
  color: #527bbd;
  font-size: 1.1em;
  font-weight: bold;
  margin-top: 1.0em;
  margin-bottom: 0.1em;
}

div.toclevel0, div.toclevel1, div.toclevel2, div.toclevel3, div.toclevel4 {
  margin-top: 0;
  margin-bottom: 0;
}
div.toclevel2 {
  margin-left: 2em;
  font-size: 0.9em;
}
div.toclevel3 {
  margin-left: 4em;
  font-size: 0.9em;
}
div.toclevel4 {
  margin-left: 6em;
  font-size: 0.9em;
}

span.aqua { color: aqua; }
span.black { color: black; }
span.blue { color: blue; }
span.fuchsia { color: fuchsia; }
span.gray { color: gray; }
span.green { color: green; }
span.lime { color: lime; }
span.maroon { color: maroon; }
span.navy { color: navy; }
span.olive { color: olive; }
span.purple { color: purple; }
span.red { color: red; }
span.silver { color: silver; }
span.teal { color: teal; }
span.white { color: white; }
span.yellow { color: yellow; }

span.aqua-background { background: aqua; }
span.black-background { background: black; }
span.blue-background { background: blue; }
span.fuchsia-background { background: fuchsia; }
span.gray-background { background: gray; }
span.green-background { background: green; }
span.lime-background { background: lime; }
span.maroon-background { background: maroon; }
span.navy-background { background: navy; }
span.olive-background { background: olive; }
span.purple-background { background: purple; }
span.red-background { background: red; }
span.silver-background { background: silver; }
span.teal-background { background: teal; }
span.white-background { background: white; }
span.yellow-background { background: yellow; }

span.big { font-size: 2em; }
span.small { font-size: 0.6em; }

span.underline { text-decoration: underline; }
span.overline { text-decoration: overline; }
span.line-through { text-decoration: line-through; }

div.unbreakable { page-break-inside: avoid; }


/*
 * xhtml11 specific
 *
 * */

div.tableblock {
  margin-top: 1.0em;
  margin-bottom: 1.5em;
}
div.tableblock > table {
  border: 3px solid #527bbd;
}
thead, p.table.header {
  font-weight: bold;
  color: #527bbd;
}
p.table {
  margin-top: 0;
}
/* Because the table frame attribute is overriden by CSS in most browsers. */
div.tableblock > table[frame="void"] {
  border-style: none;
}
div.tableblock > table[frame="hsides"] {
  border-left-style: none;
  border-right-style: none;
}
div.tableblock > table[frame="vsides"] {
  border-top-style: none;
  border-bottom-style: none;
}


/*
 * html5 specific
 *
 * */

table.tableblock {
  margin-top: 1.0em;
  margin-bottom: 1.5em;
}
thead, p.tableblock.header {
  font-weight: bold;
  color: #527bbd;
}
p.tableblock {
  margin-top: 0;
}
table.tableblock {
  border-width: 3px;
  border-spacing: 0px;
  border-style: solid;
  border-color: #527bbd;
  border-collapse: collapse;
}
th.tableblock, td.tableblock {
  border-width: 1px;
  padding: 4px;
  border-style: solid;
  border-color: #527bbd;
}

table.tableblock.frame-topbot {
  border-left-style: hidden;
  border-right-style: hidden;
}
table.tableblock.frame-sides {
  border-top-style: hidden;
  border-bottom-style: hidden;
}
table.tableblock.frame-none {
  border-style: hidden;
}

th.tableblock.halign-left, td.tableblock.halign-left {
  text-align: left;
}
th.tableblock.halign-center, td.tableblock.halign-center {
  text-align: center;
}
th.tableblock.halign-right, td.tableblock.halign-right {
  text-align: right;
}

th.tableblock.valign-top, td.tableblock.valign-top {
  vertical-align: top;
}
th.tableblock.valign-middle, td.tableblock.valign-middle {
  vertical-align: middle;
}
th.tableblock.valign-bottom, td.tableblock.valign-bottom {
  vertical-align: bottom;
}


/*
 * manpage specific
 *
 * */

body.manpage h1 {
  padding-top: 0.5em;
  padding-bottom: 0.5em;
  border-top: 2px solid silver;
  border-bottom: 2px solid silver;
}
body.manpage h2 {
  border-style: none;
}
body.manpage div.sectionbody {
  margin-left: 3em;
}

@media print {
  body.manpage div#toc { display: none; }
}
/*
  pygmentize filter
*/
.highlight .hll { background-color: #ffffcc }
.highlight  { background: #f4f4f4; }
.highlight .c { color: #008800; font-style: italic } /* Comment */
.highlight .err { border: 1px solid #FF0000 } /* Error */
.highlight .k { color: #AA22FF; font-weight: bold } /* Keyword */
.highlight .o { color: #666666 } /* Operator */
.highlight .cm { color: #008800; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #008800 } /* Comment.Preproc */
.highlight .c1 { color: #008800; font-style: italic } /* Comment.Single */
.highlight .cs { color: #008800; font-weight: bold } /* Comment.Special */
.highlight .gd { color: #A00000 } /* Generic.Deleted */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #FF0000 } /* Generic.Error */
.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.highlight .gi { color: #00A000 } /* Generic.Inserted */
.highlight .go { color: #808080 } /* Generic.Output */
.highlight .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.highlight .gt { color: #0040D0 } /* Generic.Traceback */
.highlight .kc { color: #AA22FF; font-weight: bold } /* Keyword.Constant */
.highlight .kd { color: #AA22FF; font-weight: bold } /* Keyword.Declaration */
.highlight .kn { color: #AA22FF; font-weight: bold } /* Keyword.Namespace */
.highlight .kp { color: #AA22FF } /* Keyword.Pseudo */
.highlight .kr { color: #AA22FF; font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #00BB00; font-weight: bold } /* Keyword.Type */
.highlight .m { color: #666666 } /* Literal.Number */
.highlight .s { color: #BB4444 } /* Literal.String */
.highlight .na { color: #BB4444 } /* Name.Attribute */
.highlight .nb { color: #AA22FF } /* Name.Builtin */
.highlight .nc { color: #0000FF } /* Name.Class */
.highlight .no { color: #880000 } /* Name.Constant */
.highlight .nd { color: #AA22FF } /* Name.Decorator */
.highlight .ni { color: #999999; font-weight: bold } /* Name.Entity */
.highlight .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #00A000 } /* Name.Function */
.highlight .nl { color: #A0A000 } /* Name.Label */
.highlight .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.highlight .nt { color: #008000; font-weight: bold } /* Name.Tag */
.highlight .nv { color: #B8860B } /* Name.Variable */
.highlight .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mf { color: #666666 } /* Literal.Number.Float */
.highlight .mh { color: #666666 } /* Literal.Number.Hex */
.highlight .mi { color: #666666 } /* Literal.Number.Integer */
.highlight .mo { color: #666666 } /* Literal.Number.Oct */
.highlight .sb { color: #BB4444 } /* Literal.String.Backtick */
.highlight .sc { color: #BB4444 } /* Literal.String.Char */
.highlight .sd { color: #BB4444; font-style: italic } /* Literal.String.Doc */
.highlight .s2 { color: #BB4444 } /* Literal.String.Double */
.highlight .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
.highlight .sh { color: #BB4444 } /* Literal.String.Heredoc */
.highlight .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
.highlight .sx { color: #008000 } /* Literal.String.Other */
.highlight .sr { color: #BB6688 } /* Literal.String.Regex */
.highlight .s1 { color: #BB4444 } /* Literal.String.Single */
.highlight .ss { color: #B8860B } /* Literal.String.Symbol */
.highlight .bp { color: #AA22FF } /* Name.Builtin.Pseudo */
.highlight .vc { color: #B8860B } /* Name.Variable.Class */
.highlight .vg { color: #B8860B } /* Name.Variable.Global */
.highlight .vi { color: #B8860B } /* Name.Variable.Instance */
.highlight .il { color: #666666 } /* Literal.Number.Integer.Long */



</style>
<script type="text/javascript">
/*<![CDATA[*/
var asciidoc = {  // Namespace.

/////////////////////////////////////////////////////////////////////
// Table Of Contents generator
/////////////////////////////////////////////////////////////////////

/* Author: Mihai Bazon, September 2002
 * http://students.infoiasi.ro/~mishoo
 *
 * Table Of Content generator
 * Version: 0.4
 *
 * Feel free to use this script under the terms of the GNU General Public
 * License, as long as you do not remove or alter this notice.
 */

 /* modified by Troy D. Hanson, September 2006. License: GPL */
 /* modified by Stuart Rackham, 2006, 2009. License: GPL */

// toclevels = 1..4.
toc: function (toclevels) {

  function getText(el) {
    var text = "";
    for (var i = el.firstChild; i != null; i = i.nextSibling) {
      if (i.nodeType == 3 /* Node.TEXT_NODE */) // IE doesn't speak constants.
        text += i.data;
      else if (i.firstChild != null)
        text += getText(i);
    }
    return text;
  }

  function TocEntry(el, text, toclevel) {
    this.element = el;
    this.text = text;
    this.toclevel = toclevel;
  }

  function tocEntries(el, toclevels) {
    var result = new Array;
    var re = new RegExp('[hH]([1-'+(toclevels+1)+'])');
    // Function that scans the DOM tree for header elements (the DOM2
    // nodeIterator API would be a better technique but not supported by all
    // browsers).
    var iterate = function (el) {
      for (var i = el.firstChild; i != null; i = i.nextSibling) {
        if (i.nodeType == 1 /* Node.ELEMENT_NODE */) {
          var mo = re.exec(i.tagName);
          if (mo && (i.getAttribute("class") || i.getAttribute("className")) != "float") {
            result[result.length] = new TocEntry(i, getText(i), mo[1]-1);
          }
          iterate(i);
        }
      }
    }
    iterate(el);
    return result;
  }

  var toc = document.getElementById("toc");
  if (!toc) {
    return;
  }

  // Delete existing TOC entries in case we're reloading the TOC.
  var tocEntriesToRemove = [];
  var i;
  for (i = 0; i < toc.childNodes.length; i++) {
    var entry = toc.childNodes[i];
    if (entry.nodeName.toLowerCase() == 'div'
     && entry.getAttribute("class")
     && entry.getAttribute("class").match(/^toclevel/))
      tocEntriesToRemove.push(entry);
  }
  for (i = 0; i < tocEntriesToRemove.length; i++) {
    toc.removeChild(tocEntriesToRemove[i]);
  }

  // Rebuild TOC entries.
  var entries = tocEntries(document.getElementById("content"), toclevels);
  for (var i = 0; i < entries.length; ++i) {
    var entry = entries[i];
    if (entry.element.id == "")
      entry.element.id = "_toc_" + i;
    var a = document.createElement("a");
    a.href = "#" + entry.element.id;
    a.appendChild(document.createTextNode(entry.text));
    var div = document.createElement("div");
    div.appendChild(a);
    div.className = "toclevel" + entry.toclevel;
    toc.appendChild(div);
  }
  if (entries.length == 0)
    toc.parentNode.removeChild(toc);
},


/////////////////////////////////////////////////////////////////////
// Footnotes generator
/////////////////////////////////////////////////////////////////////

/* Based on footnote generation code from:
 * http://www.brandspankingnew.net/archive/2005/07/format_footnote.html
 */

footnotes: function () {
  // Delete existing footnote entries in case we're reloading the footnodes.
  var i;
  var noteholder = document.getElementById("footnotes");
  if (!noteholder) {
    return;
  }
  var entriesToRemove = [];
  for (i = 0; i < noteholder.childNodes.length; i++) {
    var entry = noteholder.childNodes[i];
    if (entry.nodeName.toLowerCase() == 'div' && entry.getAttribute("class") == "footnote")
      entriesToRemove.push(entry);
  }
  for (i = 0; i < entriesToRemove.length; i++) {
    noteholder.removeChild(entriesToRemove[i]);
  }

  // Rebuild footnote entries.
  var cont = document.getElementById("content");
  var spans = cont.getElementsByTagName("span");
  var refs = {};
  var n = 0;
  for (i=0; i<spans.length; i++) {
    if (spans[i].className == "footnote") {
      n++;
      var note = spans[i].getAttribute("data-note");
      if (!note) {
        // Use [\s\S] in place of . so multi-line matches work.
        // Because JavaScript has no s (dotall) regex flag.
        note = spans[i].innerHTML.match(/\s*\[([\s\S]*)]\s*/)[1];
        spans[i].innerHTML =
          "[<a id='_footnoteref_" + n + "' href='#_footnote_" + n +
          "' title='View footnote' class='footnote'>" + n + "</a>]";
        spans[i].setAttribute("data-note", note);
      }
      noteholder.innerHTML +=
        "<div class='footnote' id='_footnote_" + n + "'>" +
        "<a href='#_footnoteref_" + n + "' title='Return to text'>" +
        n + "</a>. " + note + "</div>";
      var id =spans[i].getAttribute("id");
      if (id != null) refs["#"+id] = n;
    }
  }
  if (n == 0)
    noteholder.parentNode.removeChild(noteholder);
  else {
    // Process footnoterefs.
    for (i=0; i<spans.length; i++) {
      if (spans[i].className == "footnoteref") {
        var href = spans[i].getElementsByTagName("a")[0].getAttribute("href");
        href = href.match(/#.*/)[0];  // Because IE return full URL.
        n = refs[href];
        spans[i].innerHTML =
          "[<a href='#_footnote_" + n +
          "' title='View footnote' class='footnote'>" + n + "</a>]";
      }
    }
  }
},

install: function(toclevels) {
  var timerId;

  function reinstall() {
    asciidoc.footnotes();
    if (toclevels) {
      asciidoc.toc(toclevels);
    }
  }

  function reinstallAndRemoveTimer() {
    clearInterval(timerId);
    reinstall();
  }

  timerId = setInterval(reinstall, 500);
  if (document.addEventListener)
    document.addEventListener("DOMContentLoaded", reinstallAndRemoveTimer, false);
  else
    window.onload = reinstallAndRemoveTimer;
}

}
asciidoc.install(2);
/*]]>*/
</script>
</head>
<body class="article">
<div id="header">
<h1>Week 0, continued</h1>
<span id="author">Andrew Sellergren</span><br>
<div id="toc">
  <div id="toctitle">Table of Contents</div>
  <noscript><p><b>JavaScript must be enabled in your browser to display the table of contents.</b></p></noscript>
<div class="toclevel1"><a href="#_announcements_and_demos">Announcements and Demos</a></div><div class="toclevel1"><a href="#_from_last_time">From Last Time</a></div><div class="toclevel1"><a href="#_introduction_to_programming">Introduction to Programming</a></div><div class="toclevel2"><a href="#_c">C</a></div><div class="toclevel2"><a href="#_scratch">Scratch</a></div></div>
</div>
<div id="content">
<div class="sect1">
<h2 id="_announcements_and_demos">Announcements and Demos</h2>
<div class="sectionbody">
<div class="ulist"><ul>
<li>
<p>
Not sure about CS50?  Don’t take our word for it, listen to <a href="http://www.youtube.com/watch?v=SMrp9P2iuPs">Chi</a>.
</p>
</li>
</ul></div>
</div>
</div>
<div class="sect1">
<h2 id="_from_last_time">From Last Time</h2>
<div class="sectionbody">
<div class="ulist"><ul>
<li>
<p>
We used desk lamps to represent transistors, both of which exist in one 
of two states: off and on.  The off state corresponds to 0 in binary and
 the on state corresponds to 1 in binary.
</p>
</li>
<li>
<p>
We then used students to represent 0 and 1 in binary.  A raised hand 
meant 1 and a hand at the side meant 0.  With 8 students, we had 8 bits,
 called a byte.  Together, these 8 bits signified numbers large enough 
to represent alphabetical characters using the ASCII encoding system.
</p>
</li>
<li>
<p>
We defined an algorithm as a series of instructions that can be executed
 to achieve a goal.  Two goals we had were to count the number of 
students in the lecture hall and to find the name Smith in a phonebook. 
 In case you missed it, here’s <a href="http://www.youtube.com/watch?v=P4fcOLN9heU">footage</a> of David tearing the phonebook in half.
</p>
</li>
<li>
<p>
We conveyed our algorithms in pseudocode, syntax meant to generically 
represent a programming language.  The first pseudocode we looked at was
 for counting people in a room one at a time.  To do this, we introduced
 a <em>variable</em> <code>n</code>.  A variable is a storage container,
 a chunk of some number of bits of memory, in which we can put values, 
images, words, etc.  We also introduced a <em>loop</em> so that we could
 execute the same logic multiple times.  The "for each" syntax is common
 in describing a loop, as is indenting any lines of code that should 
execute within the loop:
</p>
<div class="listingblock">
<div class="content">
<pre><code>let n = 0
for each person in room
  set n = n + 1</code></pre>
</div></div>
</li>
<li>
<p>
With this algorithm in hand, we tried a few representative inputs to see
 if we got the desired outputs.  For inputs of 0 and 2 people in the 
room, we got the correct outputs 0 and 2.
</p>
</li>
<li>
<p>
To make our algorithm a little more efficient, we modified it to count by twos instead of ones:
</p>
<div class="listingblock">
<div class="content">
<pre><code>let n = 0
for each pair of people in room
  set n = n + 2</code></pre>
</div></div>
</li>
<li>
<p>
Unfortunately, this code breaks when there is an odd number of people in the room.  To redress this, we added a <em>condition</em> after the loop:
</p>
<div class="listingblock">
<div class="content">
<pre><code>let n = 0
for each pair of people in room
  set n = n + 2
if 1 person remains then
  set n = n + 1</code></pre>
</div></div>
</li>
</ul></div>
</div>
</div>
<div class="sect1">
<h2 id="_introduction_to_programming">Introduction to Programming</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_c">C</h3>
<div class="ulist"><ul>
<li>
<p>
Henceforth, we’ll be writing mostly <em>source code</em>, which, unlike 
pseudocode, must adhere to the syntax of the programming language in 
which it’s written.  We’ll be writing this source code within the CS50 
Appliance, a piece of software that gives the illusion of an operating 
system called Linux running within your computer’s normal environment.
</p>
</li>
<li>
<p>
Whether you have a Mac or a PC, you can use any number of text editors to write source code. <span data-note="Although if you use &lt;code&gt;emacs&lt;/code&gt; you’re just wrong." class="footnote">[<a id="_footnoteref_1" href="#_footnote_1" title="View footnote" class="footnote">1</a>]</span>  Using the text editor gEdit, let’s write a short program in C:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, world!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
At the bottom of gEdit is a terminal window that we can use to execute a
 command that will, as its name suggests, make our program:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre>make hello
</pre></div></div></div>
</li>
<li>
<p>
<code>make</code> looks for a file named <code>hello.c</code> and passes it to a <em>compiler</em> named <code>clang</code>.  Once it’s done so, we can execute this command to see "hello, world!" printed to the screen:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre>./hello
</pre></div></div></div>
</li>
<li>
<p>
Given how much this arcane syntax gets in the way of the underlying 
programming concepts, we’re going to set aside C for now.  Instead, 
we’ll be using a graphical programming language named Scratch.
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_scratch">Scratch</h3>
<div class="ulist"><ul>
<li>
<p>
To start working with Scratch, you’ll need to login and register at MIT’s <a href="http://scratch.mit.edu/">website</a>.  Instructions for this are detailed in specification for Problem Set 0.
</p>
</li>
<li>
<p>
Once you click Create to start a new project, take note of the following layout:
</p>
<div class="ulist"><ul>
<li>
<p>
At far left is the stage, where the program will be carried out.
</p>
</li>
<li>
<p>
In the middle is the “palette” of puzzle pieces, which represent 
programming statements. Programs will be composed by putting puzzle 
pieces together in a particular order.
</p>
</li>
<li>
<p>
At bottom left are sprites, or characters that will carry out your instructions.
</p>
</li>
<li>
<p>
To the right of the palette is the scripts area, where puzzle pieces must be dragged and strung together.
</p>
</li>
</ul></div>
</li>
<li>
<p>
The puzzle pieces under the Control category are curved on the top so 
that they don’t interlock with any other pieces.  This is because they 
denote the start of a program.
</p>
</li>
<li>
<p>
We can recreate our very simple C program in Scratch using the "say" puzzle piece. <a href="http://scratch.mit.edu/projects/12196962/"><code>hello, world.sb2</code></a> is equivalent to <code>hello.c</code>, only a little more colorful.
</p>
</li>
<li>
<p>
Note that Scratch is also a standalone program that you can download to write and execute code.
</p>
</li>
<li>
<p>
Yes, <a href="http://scratch.mit.edu/projects/12196962/"><code>hello, world.sb2</code></a> is pretty simple, but take a look at <a href="http://scratch.mit.edu/projects/12199021/">Scratch, Scratch Revolution</a> to see what is possible in Scratch.  The footage you see through Vanessa’s eyes is from Google Glass.  Thanks, Google! <span data-note="For my job, too!" class="footnote">[<a id="_footnoteref_2" href="#_footnote_2" title="View footnote" class="footnote">2</a>]</span>
</p>
</li>
<li>
<p>
Now take a look at <a href="http://scratch.mit.edu/projects/12199076/">Cookie Love Story</a>
 and think about what programming constructs you might use to implement 
it.  In Scratch, as in most programming languages, for example, there 
exists the concept of <em>events</em> that trigger some piece of source code to execute.
</p>
</li>
<li>
<p>
Before we go any farther, let’s talk about some computer science jargon: a <em>statement</em>
 is an action that we give to the computer to perform. In the context of
 Scratch, statements begin with verbs like "say," "play," and "wait."
</p>
</li>
<li>
<p>
So far we’ve only made use of statements, which are direct imperatives 
given to the computer. But if we want to introduce logic into our 
program, we’ll need boolean expressions and conditions.
</p>
<div class="ulist"><ul>
<li>
<p>
<em>Boolean expressions</em> are those that have only two possible 
values: true or false, yes or no, on or off, 1 or 0. No matter how you 
say it, it’s a simple variable. In Scratch, boolean expressions are 
represented as hexagons and are written as yes-or-no questions such as 
"touching mouse-pointer?," "mouse down?" or comparisons such as 
less-than, equal-to, or greater-than.  In CS50 Courses, boolean 
expressions are used to implement the checkboxes for CUE score 
greater-than and "doesn’t conflict with Courses I’m Taking."
</p>
</li>
<li>
<p>
<em>Conditions</em> are forks in the logic of a program that execute 
depending on whether or not certain criteria are met.  The if and 
if-else blocks in Scratch are examples of conditions that depend on 
Boolean expressions.
</p>
</li>
</ul></div>
</li>
<li>
<p>
Also available to you in Scratch are loops, variables, and functions.  More on those later.
</p>
</li>
<li>
<p>
By replacing the "say" block with a "play" block we can turn "hello, world" into <a href="http://scratch.mit.edu/projects/12199089">meow</a>.  To make the program more interesting, we can add an if condition such that the cat will meow <a href="http://scratch.mit.edu/projects/12199096">approximately half the time</a>.
  The condition says, "pick a random number between 1 and 10 and if that
 number is less than 6, have the cat meow."  If we want the cat to meow 
forever without having to click the green flag over and over again, we 
appropriately <a href="http://scratch.mit.edu/projects/12199099/">use the forever block</a>.
</p>
</li>
<li>
<p>
In <a href="http://scratch.mit.edu/projects/12199100/">pet the cat</a>, 
we combine a loop and a condition so that the cat will meow only if the 
mouse pointer is touching it or, in other words, if we are petting it.  
In <a href="http://scratch.mit.edu/projects/12199106/">don’t pet the cat</a>, we add an extra condition (using the <code>else</code>
 keyword) so that the cat will meow indefinitely, but will roar if we 
touch it with the mouse pointer.  In these, we have the beginnings of a 
game!
</p>
</li>
<li>
<p>
The <a href="http://scratch.mit.edu/projects/12199112/">hi hi hi</a> program hints at the concept of <em>threading</em>,
 which involves multiple scripts executing simultaneously.  In the logic
 of one of these scripts, we see that if a variable named <code>muted</code>
 is 0, we play the sound.  Recall that 0 is equivalent to false, so this
 makes sense: if the script is not muted, it should play sound.  The 
second script actually sets the variable <code>muted</code>: to 1 if 
it’s currently 0 or to 0 if it’s currently 1.  This variable setting 
occurs when we press the space bar.  Note that variables in programs 
should have descriptive names, as with <code>muted</code> here.  These two scripts are sharing a <em>state</em> between them: whether or not the program is muted.
</p>
</li>
<li>
<p>
So-called <em>infinite loops</em>, which sometimes signal a bug in the source code, are not always a bad thing.  Take <a href="http://scratch.mit.edu/projects/12198996">counting sheep</a>, for example, in which an infinite loop is used to increment a variable indefinitely.
</p>
</li>
<li>
<p>
Say we want to implement a program in which a cat coughs three times.
</p>
<div class="ulist"><ul>
<li>
<p>
We could do this as in <a href="http://scratch.mit.edu/projects/12197173/">cough-0</a> by duplicating statements (you can actually right click to do this), but it’s not the most elegant solution.
</p>
</li>
<li>
<p>
The obvious way to clean this up is to use a repeat block, as in <a href="http://scratch.mit.edu/projects/12197255/#editor">cough-1</a>.
  This is better design because if we want to change the number of times
 the cat coughs, we simply change a variable rather than duplicating an 
entire statement.  If you find yourself copying and pasting code, you 
should ask yourself if there’s a better way to do it.
</p>
</li>
<li>
<p>
Our program would be even cleaner if we had our own cough block.  We can
 do this in Scratch by clicking on More Blocks and Make a Block.  As 
soon as we name it "cough," a curved puzzle piece reading "define cough"
 appears in the scripts window.  Now we steal the "say" and "wait" 
blocks from our loop and link them to this "define cough" piece.  In 
doing so, we’ve defined a <em>function</em>.  Under More Blocks, a new purple block called "cough" has appeared.  Take a look at the this implementation in <a href="http://scratch.mit.edu/projects/12197294/">cough-2</a>.
</p>
</li>
</ul></div>
</li>
<li>
<p>
Now, say we want to implement a program in which a cat coughs and also sneezes.
</p>
<div class="ulist"><ul>
<li>
<p>
Saying "achoo" is very similar to saying "cough," so we don’t want to 
copy and paste the definition of the cough function and change the word 
that’s said.  Better would be to implement a higher-level function that 
takes inputs, also known as <em>arguments</em>.  To do this in Scratch, click More Blocks and Make a Block, then expand the More Options menu.  Thus, in <a href="http://scratch.mit.edu/projects/12197698/">cough-4</a>, we have a function which takes two arguments called <code>word</code> and <code>n</code>, or what should be said and how many times it should be said, respectively.
</p>
</li>
<li>
<p>
We’re moving fast, but the take-away is that common functionality can be factored out so that code isn’t repeated unnecessarily.
</p>
</li>
</ul></div>
</li>
<li>
<p>
To revisit the concept of threading, consider the <a href="http://scratch.mit.edu/studios/247678/">threads</a>
 program.  Here, we have two different scripts associated with two 
different sprites, a cat and a bird. For the cat, we begin by placing 
him in a given spot on the stage and orienting him in a random 
direction. Then we begin a loop whereby if he touches the bird, then the
 game ends; otherwise, we orient him toward the bird and advance him one
 step. For the bird, we move him around the stage three steps at a time.
 Effectively, then, the cat is chasing the bird until he catches him.  
If we increase the number of steps that the cat takes compared to the 
bird, the cat will catch the bird all the more quickly.
</p>
</li>
<li>
<p>
Another programming construct we’ll become familiar with soon is that of <em>arrays</em>.  Arrays are collections of related variables.
</p>
</li>
<li>
<p>
Events are another method of communicating between sprites. The <a href="http://scratch.mit.edu/projects/12199034/">events</a>
 program leverages events to play the game of Marco Polo. Thus far, our 
sprites haven’t really been communicating with each other. But in this 
game of Marco Polo, one sprite is saying "Marco," and the other is 
listening for him to say it so that she can say "Polo" in response. The 
second sprite is listening for the event which the first sprite 
broadcasts.
</p>
</li>
<li>
<p>
Even complex games like <a href="http://scratch.mit.edu/projects/12199081/">Frogger</a>
 can be implemented using the concepts we’ve already been exposed to, 
e.g. events, conditions, statements.  You can even use the webcam to 
trigger actions, as in <a href="http://scratch.mit.edu/projects/10016382">Move the Butterfly</a>.
</p>
</li>
<li>
<p>
The objective of Problem Set 0 is for you to have fun playing around 
with Scratch.  Make something interesting, interactive, artistic, fun.  
Don’t feel like you need to implement Scratch Scratch Revolution, but 
hopefully you’ll be proud of what you make, enough to show it off to 
your friends and family once you’ve uploaded it to MIT’s website.
</p>
</li>
<li>
<p>
We leave you with <a href="http://scratch.mit.edu/projects/10003491">Raining Men</a>.  While you enjoy it, think about how you might implement it!
</p>
</li>
</ul></div>
</div>
</div>
</div>
</div>
<div id="footnotes"><hr><div class="footnote" id="_footnote_1"><a href="#_footnoteref_1" title="Return to text">1</a>. Although if you use <code>emacs</code> you’re just wrong.</div><div class="footnote" id="_footnote_2"><a href="#_footnoteref_2" title="Return to text">2</a>. For my job, too!</div></div>
<div id="footer">
<div id="footer-text">
Last updated 2013-09-11 21:46:02 PDT
</div>
</div>


</body></html>