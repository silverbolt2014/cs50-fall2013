<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="AsciiDoc 8.6.8">
<title>Week 0</title>
<style type="text/css">
/* Shared CSS for AsciiDoc xhtml11 and html5 backends */

/* Default font. */
body {
  font-family: Georgia,serif;
}

/* Title font. */
h1, h2, h3, h4, h5, h6,
div.title, caption.title,
thead, p.table.header,
#toctitle,
#author, #revnumber, #revdate, #revremark,
#footer {
  font-family: Arial,Helvetica,sans-serif;
}

body {
  margin: 1em 5% 1em 5%;
}

a {
  color: blue;
  text-decoration: underline;
}
a:visited {
  color: fuchsia;
}

em {
  font-style: italic;
  color: navy;
}

strong {
  font-weight: bold;
  color: #083194;
}

h1, h2, h3, h4, h5, h6 {
  color: #527bbd;
  margin-top: 1.2em;
  margin-bottom: 0.5em;
  line-height: 1.3;
}

h1, h2, h3 {
  border-bottom: 2px solid silver;
}
h2 {
  padding-top: 0.5em;
}
h3 {
  float: left;
}
h3 + * {
  clear: left;
}
h5 {
  font-size: 1.0em;
}

div.sectionbody {
  margin-left: 0;
}

hr {
  border: 1px solid silver;
}

p {
  margin-top: 0.5em;
  margin-bottom: 0.5em;
}

ul, ol, li > p {
  margin-top: 0;
}
ul > li     { color: #aaa; }
ul > li > * { color: black; }

.monospaced, code, pre {
  font-family: "Courier New", Courier, monospace;
  font-size: inherit;
  color: navy;
  padding: 0;
  margin: 0;
}


#author {
  color: #527bbd;
  font-weight: bold;
  font-size: 1.1em;
}
#email {
}
#revnumber, #revdate, #revremark {
}

#footer {
  font-size: small;
  border-top: 2px solid silver;
  padding-top: 0.5em;
  margin-top: 4.0em;
}
#footer-text {
  float: left;
  padding-bottom: 0.5em;
}
#footer-badges {
  float: right;
  padding-bottom: 0.5em;
}

#preamble {
  margin-top: 1.5em;
  margin-bottom: 1.5em;
}
div.imageblock, div.exampleblock, div.verseblock,
div.quoteblock, div.literalblock, div.listingblock, div.sidebarblock,
div.admonitionblock {
  margin-top: 1.0em;
  margin-bottom: 1.5em;
}
div.admonitionblock {
  margin-top: 2.0em;
  margin-bottom: 2.0em;
  margin-right: 10%;
  color: #606060;
}

div.content { /* Block element content. */
  padding: 0;
}

/* Block element titles. */
div.title, caption.title {
  color: #527bbd;
  font-weight: bold;
  text-align: left;
  margin-top: 1.0em;
  margin-bottom: 0.5em;
}
div.title + * {
  margin-top: 0;
}

td div.title:first-child {
  margin-top: 0.0em;
}
div.content div.title:first-child {
  margin-top: 0.0em;
}
div.content + div.title {
  margin-top: 0.0em;
}

div.sidebarblock > div.content {
  background: #ffffee;
  border: 1px solid #dddddd;
  border-left: 4px solid #f0f0f0;
  padding: 0.5em;
}

div.listingblock > div.content {
  border: 1px solid #dddddd;
  border-left: 5px solid #f0f0f0;
  background: #f8f8f8;
  padding: 0.5em;
}

div.quoteblock, div.verseblock {
  padding-left: 1.0em;
  margin-left: 1.0em;
  margin-right: 10%;
  border-left: 5px solid #f0f0f0;
  color: #888;
}

div.quoteblock > div.attribution {
  padding-top: 0.5em;
  text-align: right;
}

div.verseblock > pre.content {
  font-family: inherit;
  font-size: inherit;
}
div.verseblock > div.attribution {
  padding-top: 0.75em;
  text-align: left;
}
/* DEPRECATED: Pre version 8.2.7 verse style literal block. */
div.verseblock + div.attribution {
  text-align: left;
}

div.admonitionblock .icon {
  vertical-align: top;
  font-size: 1.1em;
  font-weight: bold;
  text-decoration: underline;
  color: #527bbd;
  padding-right: 0.5em;
}
div.admonitionblock td.content {
  padding-left: 0.5em;
  border-left: 3px solid #dddddd;
}

div.exampleblock > div.content {
  border-left: 3px solid #dddddd;
  padding-left: 0.5em;
}

div.imageblock div.content { padding-left: 0; }
span.image img { border-style: none; }
a.image:visited { color: white; }

dl {
  margin-top: 0.8em;
  margin-bottom: 0.8em;
}
dt {
  margin-top: 0.5em;
  margin-bottom: 0;
  font-style: normal;
  color: navy;
}
dd > *:first-child {
  margin-top: 0.1em;
}

ul, ol {
    list-style-position: outside;
}
ol.arabic {
  list-style-type: decimal;
}
ol.loweralpha {
  list-style-type: lower-alpha;
}
ol.upperalpha {
  list-style-type: upper-alpha;
}
ol.lowerroman {
  list-style-type: lower-roman;
}
ol.upperroman {
  list-style-type: upper-roman;
}

div.compact ul, div.compact ol,
div.compact p, div.compact p,
div.compact div, div.compact div {
  margin-top: 0.1em;
  margin-bottom: 0.1em;
}

tfoot {
  font-weight: bold;
}
td > div.verse {
  white-space: pre;
}

div.hdlist {
  margin-top: 0.8em;
  margin-bottom: 0.8em;
}
div.hdlist tr {
  padding-bottom: 15px;
}
dt.hdlist1.strong, td.hdlist1.strong {
  font-weight: bold;
}
td.hdlist1 {
  vertical-align: top;
  font-style: normal;
  padding-right: 0.8em;
  color: navy;
}
td.hdlist2 {
  vertical-align: top;
}
div.hdlist.compact tr {
  margin: 0;
  padding-bottom: 0;
}

.comment {
  background: yellow;
}

.footnote, .footnoteref {
  font-size: 0.8em;
}

span.footnote, span.footnoteref {
  vertical-align: super;
}

#footnotes {
  margin: 20px 0 20px 0;
  padding: 7px 0 0 0;
}

#footnotes div.footnote {
  margin: 0 0 5px 0;
}

#footnotes hr {
  border: none;
  border-top: 1px solid silver;
  height: 1px;
  text-align: left;
  margin-left: 0;
  width: 20%;
  min-width: 100px;
}

div.colist td {
  padding-right: 0.5em;
  padding-bottom: 0.3em;
  vertical-align: top;
}
div.colist td img {
  margin-top: 0.3em;
}

@media print {
  #footer-badges { display: none; }
}

#toc {
  margin-bottom: 2.5em;
}

#toctitle {
  color: #527bbd;
  font-size: 1.1em;
  font-weight: bold;
  margin-top: 1.0em;
  margin-bottom: 0.1em;
}

div.toclevel0, div.toclevel1, div.toclevel2, div.toclevel3, div.toclevel4 {
  margin-top: 0;
  margin-bottom: 0;
}
div.toclevel2 {
  margin-left: 2em;
  font-size: 0.9em;
}
div.toclevel3 {
  margin-left: 4em;
  font-size: 0.9em;
}
div.toclevel4 {
  margin-left: 6em;
  font-size: 0.9em;
}

span.aqua { color: aqua; }
span.black { color: black; }
span.blue { color: blue; }
span.fuchsia { color: fuchsia; }
span.gray { color: gray; }
span.green { color: green; }
span.lime { color: lime; }
span.maroon { color: maroon; }
span.navy { color: navy; }
span.olive { color: olive; }
span.purple { color: purple; }
span.red { color: red; }
span.silver { color: silver; }
span.teal { color: teal; }
span.white { color: white; }
span.yellow { color: yellow; }

span.aqua-background { background: aqua; }
span.black-background { background: black; }
span.blue-background { background: blue; }
span.fuchsia-background { background: fuchsia; }
span.gray-background { background: gray; }
span.green-background { background: green; }
span.lime-background { background: lime; }
span.maroon-background { background: maroon; }
span.navy-background { background: navy; }
span.olive-background { background: olive; }
span.purple-background { background: purple; }
span.red-background { background: red; }
span.silver-background { background: silver; }
span.teal-background { background: teal; }
span.white-background { background: white; }
span.yellow-background { background: yellow; }

span.big { font-size: 2em; }
span.small { font-size: 0.6em; }

span.underline { text-decoration: underline; }
span.overline { text-decoration: overline; }
span.line-through { text-decoration: line-through; }

div.unbreakable { page-break-inside: avoid; }


/*
 * xhtml11 specific
 *
 * */

div.tableblock {
  margin-top: 1.0em;
  margin-bottom: 1.5em;
}
div.tableblock > table {
  border: 3px solid #527bbd;
}
thead, p.table.header {
  font-weight: bold;
  color: #527bbd;
}
p.table {
  margin-top: 0;
}
/* Because the table frame attribute is overriden by CSS in most browsers. */
div.tableblock > table[frame="void"] {
  border-style: none;
}
div.tableblock > table[frame="hsides"] {
  border-left-style: none;
  border-right-style: none;
}
div.tableblock > table[frame="vsides"] {
  border-top-style: none;
  border-bottom-style: none;
}


/*
 * html5 specific
 *
 * */

table.tableblock {
  margin-top: 1.0em;
  margin-bottom: 1.5em;
}
thead, p.tableblock.header {
  font-weight: bold;
  color: #527bbd;
}
p.tableblock {
  margin-top: 0;
}
table.tableblock {
  border-width: 3px;
  border-spacing: 0px;
  border-style: solid;
  border-color: #527bbd;
  border-collapse: collapse;
}
th.tableblock, td.tableblock {
  border-width: 1px;
  padding: 4px;
  border-style: solid;
  border-color: #527bbd;
}

table.tableblock.frame-topbot {
  border-left-style: hidden;
  border-right-style: hidden;
}
table.tableblock.frame-sides {
  border-top-style: hidden;
  border-bottom-style: hidden;
}
table.tableblock.frame-none {
  border-style: hidden;
}

th.tableblock.halign-left, td.tableblock.halign-left {
  text-align: left;
}
th.tableblock.halign-center, td.tableblock.halign-center {
  text-align: center;
}
th.tableblock.halign-right, td.tableblock.halign-right {
  text-align: right;
}

th.tableblock.valign-top, td.tableblock.valign-top {
  vertical-align: top;
}
th.tableblock.valign-middle, td.tableblock.valign-middle {
  vertical-align: middle;
}
th.tableblock.valign-bottom, td.tableblock.valign-bottom {
  vertical-align: bottom;
}


/*
 * manpage specific
 *
 * */

body.manpage h1 {
  padding-top: 0.5em;
  padding-bottom: 0.5em;
  border-top: 2px solid silver;
  border-bottom: 2px solid silver;
}
body.manpage h2 {
  border-style: none;
}
body.manpage div.sectionbody {
  margin-left: 3em;
}

@media print {
  body.manpage div#toc { display: none; }
}
/*
  pygmentize filter
*/
.highlight .hll { background-color: #ffffcc }
.highlight  { background: #f4f4f4; }
.highlight .c { color: #008800; font-style: italic } /* Comment */
.highlight .err { border: 1px solid #FF0000 } /* Error */
.highlight .k { color: #AA22FF; font-weight: bold } /* Keyword */
.highlight .o { color: #666666 } /* Operator */
.highlight .cm { color: #008800; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #008800 } /* Comment.Preproc */
.highlight .c1 { color: #008800; font-style: italic } /* Comment.Single */
.highlight .cs { color: #008800; font-weight: bold } /* Comment.Special */
.highlight .gd { color: #A00000 } /* Generic.Deleted */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #FF0000 } /* Generic.Error */
.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.highlight .gi { color: #00A000 } /* Generic.Inserted */
.highlight .go { color: #808080 } /* Generic.Output */
.highlight .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.highlight .gt { color: #0040D0 } /* Generic.Traceback */
.highlight .kc { color: #AA22FF; font-weight: bold } /* Keyword.Constant */
.highlight .kd { color: #AA22FF; font-weight: bold } /* Keyword.Declaration */
.highlight .kn { color: #AA22FF; font-weight: bold } /* Keyword.Namespace */
.highlight .kp { color: #AA22FF } /* Keyword.Pseudo */
.highlight .kr { color: #AA22FF; font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #00BB00; font-weight: bold } /* Keyword.Type */
.highlight .m { color: #666666 } /* Literal.Number */
.highlight .s { color: #BB4444 } /* Literal.String */
.highlight .na { color: #BB4444 } /* Name.Attribute */
.highlight .nb { color: #AA22FF } /* Name.Builtin */
.highlight .nc { color: #0000FF } /* Name.Class */
.highlight .no { color: #880000 } /* Name.Constant */
.highlight .nd { color: #AA22FF } /* Name.Decorator */
.highlight .ni { color: #999999; font-weight: bold } /* Name.Entity */
.highlight .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #00A000 } /* Name.Function */
.highlight .nl { color: #A0A000 } /* Name.Label */
.highlight .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.highlight .nt { color: #008000; font-weight: bold } /* Name.Tag */
.highlight .nv { color: #B8860B } /* Name.Variable */
.highlight .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mf { color: #666666 } /* Literal.Number.Float */
.highlight .mh { color: #666666 } /* Literal.Number.Hex */
.highlight .mi { color: #666666 } /* Literal.Number.Integer */
.highlight .mo { color: #666666 } /* Literal.Number.Oct */
.highlight .sb { color: #BB4444 } /* Literal.String.Backtick */
.highlight .sc { color: #BB4444 } /* Literal.String.Char */
.highlight .sd { color: #BB4444; font-style: italic } /* Literal.String.Doc */
.highlight .s2 { color: #BB4444 } /* Literal.String.Double */
.highlight .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
.highlight .sh { color: #BB4444 } /* Literal.String.Heredoc */
.highlight .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
.highlight .sx { color: #008000 } /* Literal.String.Other */
.highlight .sr { color: #BB6688 } /* Literal.String.Regex */
.highlight .s1 { color: #BB4444 } /* Literal.String.Single */
.highlight .ss { color: #B8860B } /* Literal.String.Symbol */
.highlight .bp { color: #AA22FF } /* Name.Builtin.Pseudo */
.highlight .vc { color: #B8860B } /* Name.Variable.Class */
.highlight .vg { color: #B8860B } /* Name.Variable.Global */
.highlight .vi { color: #B8860B } /* Name.Variable.Instance */
.highlight .il { color: #666666 } /* Literal.Number.Integer.Long */



</style>
<script type="text/javascript">
/*<![CDATA[*/
var asciidoc = {  // Namespace.

/////////////////////////////////////////////////////////////////////
// Table Of Contents generator
/////////////////////////////////////////////////////////////////////

/* Author: Mihai Bazon, September 2002
 * http://students.infoiasi.ro/~mishoo
 *
 * Table Of Content generator
 * Version: 0.4
 *
 * Feel free to use this script under the terms of the GNU General Public
 * License, as long as you do not remove or alter this notice.
 */

 /* modified by Troy D. Hanson, September 2006. License: GPL */
 /* modified by Stuart Rackham, 2006, 2009. License: GPL */

// toclevels = 1..4.
toc: function (toclevels) {

  function getText(el) {
    var text = "";
    for (var i = el.firstChild; i != null; i = i.nextSibling) {
      if (i.nodeType == 3 /* Node.TEXT_NODE */) // IE doesn't speak constants.
        text += i.data;
      else if (i.firstChild != null)
        text += getText(i);
    }
    return text;
  }

  function TocEntry(el, text, toclevel) {
    this.element = el;
    this.text = text;
    this.toclevel = toclevel;
  }

  function tocEntries(el, toclevels) {
    var result = new Array;
    var re = new RegExp('[hH]([1-'+(toclevels+1)+'])');
    // Function that scans the DOM tree for header elements (the DOM2
    // nodeIterator API would be a better technique but not supported by all
    // browsers).
    var iterate = function (el) {
      for (var i = el.firstChild; i != null; i = i.nextSibling) {
        if (i.nodeType == 1 /* Node.ELEMENT_NODE */) {
          var mo = re.exec(i.tagName);
          if (mo && (i.getAttribute("class") || i.getAttribute("className")) != "float") {
            result[result.length] = new TocEntry(i, getText(i), mo[1]-1);
          }
          iterate(i);
        }
      }
    }
    iterate(el);
    return result;
  }

  var toc = document.getElementById("toc");
  if (!toc) {
    return;
  }

  // Delete existing TOC entries in case we're reloading the TOC.
  var tocEntriesToRemove = [];
  var i;
  for (i = 0; i < toc.childNodes.length; i++) {
    var entry = toc.childNodes[i];
    if (entry.nodeName.toLowerCase() == 'div'
     && entry.getAttribute("class")
     && entry.getAttribute("class").match(/^toclevel/))
      tocEntriesToRemove.push(entry);
  }
  for (i = 0; i < tocEntriesToRemove.length; i++) {
    toc.removeChild(tocEntriesToRemove[i]);
  }

  // Rebuild TOC entries.
  var entries = tocEntries(document.getElementById("content"), toclevels);
  for (var i = 0; i < entries.length; ++i) {
    var entry = entries[i];
    if (entry.element.id == "")
      entry.element.id = "_toc_" + i;
    var a = document.createElement("a");
    a.href = "#" + entry.element.id;
    a.appendChild(document.createTextNode(entry.text));
    var div = document.createElement("div");
    div.appendChild(a);
    div.className = "toclevel" + entry.toclevel;
    toc.appendChild(div);
  }
  if (entries.length == 0)
    toc.parentNode.removeChild(toc);
},


/////////////////////////////////////////////////////////////////////
// Footnotes generator
/////////////////////////////////////////////////////////////////////

/* Based on footnote generation code from:
 * http://www.brandspankingnew.net/archive/2005/07/format_footnote.html
 */

footnotes: function () {
  // Delete existing footnote entries in case we're reloading the footnodes.
  var i;
  var noteholder = document.getElementById("footnotes");
  if (!noteholder) {
    return;
  }
  var entriesToRemove = [];
  for (i = 0; i < noteholder.childNodes.length; i++) {
    var entry = noteholder.childNodes[i];
    if (entry.nodeName.toLowerCase() == 'div' && entry.getAttribute("class") == "footnote")
      entriesToRemove.push(entry);
  }
  for (i = 0; i < entriesToRemove.length; i++) {
    noteholder.removeChild(entriesToRemove[i]);
  }

  // Rebuild footnote entries.
  var cont = document.getElementById("content");
  var spans = cont.getElementsByTagName("span");
  var refs = {};
  var n = 0;
  for (i=0; i<spans.length; i++) {
    if (spans[i].className == "footnote") {
      n++;
      var note = spans[i].getAttribute("data-note");
      if (!note) {
        // Use [\s\S] in place of . so multi-line matches work.
        // Because JavaScript has no s (dotall) regex flag.
        note = spans[i].innerHTML.match(/\s*\[([\s\S]*)]\s*/)[1];
        spans[i].innerHTML =
          "[<a id='_footnoteref_" + n + "' href='#_footnote_" + n +
          "' title='View footnote' class='footnote'>" + n + "</a>]";
        spans[i].setAttribute("data-note", note);
      }
      noteholder.innerHTML +=
        "<div class='footnote' id='_footnote_" + n + "'>" +
        "<a href='#_footnoteref_" + n + "' title='Return to text'>" +
        n + "</a>. " + note + "</div>";
      var id =spans[i].getAttribute("id");
      if (id != null) refs["#"+id] = n;
    }
  }
  if (n == 0)
    noteholder.parentNode.removeChild(noteholder);
  else {
    // Process footnoterefs.
    for (i=0; i<spans.length; i++) {
      if (spans[i].className == "footnoteref") {
        var href = spans[i].getElementsByTagName("a")[0].getAttribute("href");
        href = href.match(/#.*/)[0];  // Because IE return full URL.
        n = refs[href];
        spans[i].innerHTML =
          "[<a href='#_footnote_" + n +
          "' title='View footnote' class='footnote'>" + n + "</a>]";
      }
    }
  }
},

install: function(toclevels) {
  var timerId;

  function reinstall() {
    asciidoc.footnotes();
    if (toclevels) {
      asciidoc.toc(toclevels);
    }
  }

  function reinstallAndRemoveTimer() {
    clearInterval(timerId);
    reinstall();
  }

  timerId = setInterval(reinstall, 500);
  if (document.addEventListener)
    document.addEventListener("DOMContentLoaded", reinstallAndRemoveTimer, false);
  else
    window.onload = reinstallAndRemoveTimer;
}

}
asciidoc.install(2);
/*]]>*/
</script>
</head>
<body class="article">
<div id="header">
<h1>Week 0</h1>
<span id="author">Andrew Sellergren</span><br>
<div id="toc">
  <div id="toctitle">Table of Contents</div>
  <noscript><p><b>JavaScript must be enabled in your browser to display the table of contents.</b></p></noscript>
<div class="toclevel1"><a href="#_announcements_and_demos">Announcements and Demos</a></div><div class="toclevel1"><a href="#_binary">Binary</a></div><div class="toclevel1"><a href="#_ascii">ASCII</a></div><div class="toclevel1"><a href="#_overview">Overview</a></div><div class="toclevel1"><a href="#_algorithms">Algorithms</a></div><div class="toclevel2"><a href="#_the_famous_phonebook_example">The Famous Phonebook Example</a></div><div class="toclevel2"><a href="#_counting_people">Counting People</a></div><div class="toclevel2"><a href="#_steganography">Steganography</a></div><div class="toclevel1"><a href="#_teasers">Teasers</a></div><div class="toclevel1"><a href="#_the_course">The Course</a></div><div class="toclevel2"><a href="#_lectures">Lectures</a></div><div class="toclevel2"><a href="#_simultaneous_enrollment">Simultaneous Enrollment</a></div><div class="toclevel2"><a href="#_sections">Sections</a></div><div class="toclevel2"><a href="#_problem_sets">Problem Sets</a></div><div class="toclevel2"><a href="#_office_hours">Office Hours</a></div><div class="toclevel2"><a href="#_walkthroughs">Walkthroughs</a></div><div class="toclevel2"><a href="#_post_mortems">Post-mortems</a></div><div class="toclevel2"><a href="#_tutoring">Tutoring</a></div><div class="toclevel2"><a href="#_cs50_hackathon">CS50 Hackathon</a></div><div class="toclevel2"><a href="#_cs50_fair">CS50 Fair</a></div><div class="toclevel2"><a href="#_our_mission_statement">Our Mission Statement</a></div></div>
</div>
<div id="content">
<div class="sect1">
<h2 id="_announcements_and_demos">Announcements and Demos</h2>
<div class="sectionbody">
<div class="ulist"><ul>
<li>
<p>
<a href="http://www.youtube.com/watch?v=8plnFoXnVoo">This is CS50.</a>
</p>
</li>
<li>
<p>
73% of CS50 students have no prior computer science experience!  You’re not alone!
</p>
</li>
</ul></div>
</div>
</div>
<div class="sect1">
<h2 id="_binary">Binary</h2>
<div class="sectionbody">
<div class="ulist"><ul>
<li>
<p>
At the lowest level of computers, information is represented by 
electricity.  You can think of the transistors that store this 
information as desk lamps that can be either on or off.  The off state 
represents the number 0 and the on state represents the number 1.
</p>
</li>
<li>
<p>
To represent larger numbers, we use more than one desk lamp or 
transistor.  Each desk lamp corresponds to a single bit of information. 
 Just as each lamp has two possible states (on and off), each bit can 
take two possible values (1 and 0).  With 2 desk lamps, we can represent
 2 * 2 = 4 possible values.  With 3 desk lamps, we can represent 2 * 2 *
 2 = 8 possible values.
</p>
</li>
<li>
<p>
Writing binary numbers is identical to writing the decimal numbers that 
you’re familiar with.  A number like 123 can be broken out like so:
</p>
<div class="literalblock">
<div class="content">
<pre><code>100's   10's   1's</code></pre>
</div></div>
<div class="literalblock">
<div class="content">
<pre><code>1       2      3</code></pre>
</div></div>
</li>
<li>
<p>
In binary, the 100’s, 10’s, and 1’s columns are replaced with 4’s, 2’s, 
and 1’s columns.  Only the numbers 0 and 1 are allowed in each column.
</p>
<div class="literalblock">
<div class="content">
<pre><code>4's    2's   1's</code></pre>
</div></div>
<div class="literalblock">
<div class="content">
<pre><code>1      1     1</code></pre>
</div></div>
</li>
<li>
<p>
With 1 * 4, 1 * 2, and 1 * 1, we represent the number 7.
</p>
</li>
</ul></div>
</div>
</div>
<div class="sect1">
<h2 id="_ascii">ASCII</h2>
<div class="sectionbody">
<div class="ulist"><ul>
<li>
<p>
Now that we have binary to represent numbers, we need a way to represent
 alphabetic characters.  Enter ASCII, an encoding system which 
represents every alphabetic character with a given number.  For example,
 an uppercase "A" is represented by the number 65 and an uppercase "Z" 
is represented by the number 90.
</p>
</li>
<li>
<p>
With this encoding system, we can begin to spell out words.  If we bring
 8 volunteers on stage, we can allow each of them to represent a single 
bit.  Together, they represent a number that we can map to a letter.  
When a volunteer raises her hand, her digit is a 1.  Otherwise, her 
digit is a 0.  After three rounds of this, we can represent the numbers 
66, 79, and 87, or, according to our ASCII chart, the characters B, O, 
and W.  And with that, our volunteers take a bow!
</p>
</li>
</ul></div>
</div>
</div>
<div class="sect1">
<h2 id="_overview">Overview</h2>
<div class="sectionbody">
<div class="ulist"><ul>
<li>
<p>
It’s worth noting that this is <em>Introduction</em> to Computer Science <em>I</em>.
  There’s also an Introduction to Computer Science II, so you’re in the 
right place if you have no prior knowledge of the subject matter (or 
even if you do).
</p>
</li>
<li>
<p>
CS50 is now offered with a SAT/UNS grading option!  It’s far more 
important to engage with the material than to worry about grades.  Learn
 more at the <a href="https://www.cs50.net/faqs/cs50">FAQ</a>.
</p>
</li>
<li>
<p>
CS50 is an introduction to the intellectual enterprises of computer science and the art of programming.
</p>
</li>
</ul></div>
</div>
</div>
<div class="sect1">
<h2 id="_algorithms">Algorithms</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_the_famous_phonebook_example">The Famous Phonebook Example</h3>
<div class="ulist"><ul>
<li>
<p>
Back in the days when phone numbers weren’t stored in cell phones, you 
might have actually had to look them up in a phonebook.  How did you go 
about that?  If you wanted to look up someone with the last name 
"Smith," you could flip through the phonebook one page at a time.  You 
don’t need to be a computer scientist to know that this is an 
inefficient approach.
</p>
</li>
<li>
<p>
Instead, we could start by flipping to the middle of the phonebook.  Now
 we break the problem into two.  Since we know that "Smith" isn’t in the
 left half of the alphabet, we can literally tear the phonebook in half,
 throw away the left half of the phonebook, and leave ourselves with 
only the right half.  Once again, we flip to the middle and find 
ourselves at "R."  We can again throw away the left half.  As we 
continue tearing the book in half and throwing away pieces of it, we 
will eventually be left with a single page on which the name "Smith" 
appears (assuming it was there in the first place).
</p>
</li>
<li>
<p>
How do these two approaches compare in terms of their times to solve the problem?  In the graph below, the first steep line (<code>n</code> in red) represents the approach of turning one page at a time.  The second steep line (<code>n/2</code> in yellow) represents a slightly improved approach of turning two pages at a time.  The curve (<code>log n</code>
 in green) represents our "tear and throw away" approach.  As the size 
of the problem grows, the time to solve that problem doesn’t grow nearly
 as fast.  In the context of this problem, <code>n</code> is the number 
of pages in the phonebook.  As we go from 500 to 1000 to 2000 pages in 
the phonebook, we need only tear the phonebook in half one or two more 
times.
</p>
</li>
</ul></div>
<div class="imageblock" style="text-align:center;">
<div class="content">
<img src="Week%200_files/runtimes.png" alt="Linear and logarithmic runtimes.">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_counting_people">Counting People</h3>
<div class="ulist"><ul>
<li>
<p>
In order to illustrate programming examples, we’ll often use <em>pseudocode</em>.  Pseudocode is English-like syntax meant to represent a programming language.  Check out <a href="http://www.youtube.com/watch?&amp;v=6hfOvs8pY1k">this TED-Ed video</a> which introduces the concept of an algorithm using pseudocode.
</p>
</li>
<li>
<p>
Let’s take a look at another problem: counting the number of students in
 this lecture hall.  We can solve this problem using a very simple 
algorithm:
</p>
<div class="olist arabic"><ol class="arabic">
<li>
<p>
stand up and assign yourself the number 1
</p>
</li>
<li>
<p>
pair off with someone standing, add your numbers together, and adopt the sum as your new number
</p>
</li>
<li>
<p>
one of you should sit down; the other should go back to step 2
</p>
</li>
</ol></div>
</li>
<li>
<p>
This algorithm gives us 637, which is close to the correct number of 
729.  Hooray!  Using the algorithm above, we got to this number much 
faster (in only 9-10 steps) than we would have if we had pointed to each
 person individually (729 steps).  Why is it so much faster?  Each 
execution of the algorithm cuts the problem in half, just like in the 
phonebook example.  Even if there were 4 billion students in the lecture
 hall, it would only take us 32 executions of this algorithm to count 
them all!
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_steganography">Steganography</h3>
<div class="ulist"><ul>
<li>
<p>
Steganography is the art of hiding information within images.  Although 
it appears to be random noise, this image is actually of something much 
more interesting:
</p>
</li>
</ul></div>
<div class="imageblock" style="text-align:center;">
<div class="content">
<img src="Week%200_files/iron_puzzle.png" alt="Iron puzz le steganogram.">
</div>
</div>
<div class="ulist"><ul>
<li>
<p>
The actual code for hiding information in this picture is something like the following:
</p>
</li>
</ul></div>
<div class="listingblock">
<div class="content"><table class="highlighttable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span class="nx">im</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SimpleImage</span><span class="p">(</span><span class="s2">"iron-puzzle.png"</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">im</span><span class="p">.</span><span class="nx">getWidth</span><span class="p">();</span> <span class="nx">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&lt;</span> <span class="nx">im</span><span class="p">.</span><span class="nx">getHeight</span><span class="p">();</span> <span class="nx">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// code for each x,y pixel here</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div></div>
<div class="ulist"><ul>
<li>
<p>
This code may look like gibberish to you, but it’s actually not that 
hard to break down.  Line 1 simply opens up an image.  Lines 2 through 4
 walk through the dots that make up the image.  Now let’s add some lines
 of code that remove all of the blue and green from these dots and bump 
up the red by a factor of ten:
</p>
</li>
</ul></div>
<div class="listingblock">
<div class="content"><table class="highlighttable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span class="nx">im</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SimpleImage</span><span class="p">(</span><span class="s2">"iron-puzzle.png"</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">im</span><span class="p">.</span><span class="nx">getWidth</span><span class="p">();</span> <span class="nx">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&lt;</span> <span class="nx">im</span><span class="p">.</span><span class="nx">getHeight</span><span class="p">();</span> <span class="nx">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">im</span><span class="p">.</span><span class="nx">setBlue</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="nx">im</span><span class="p">.</span><span class="nx">setGreen</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="nx">red</span> <span class="o">=</span> <span class="nx">im</span><span class="p">.</span><span class="nx">getRed</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
    <span class="nx">im</span><span class="p">.</span><span class="nx">setRed</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">red</span> <span class="o">*</span> <span class="mi">10</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">print</span><span class="p">(</span><span class="nx">im</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div></div>
<div class="ulist"><ul>
<li>
<p>
Don’t worry too much about the details of this syntax, for now.  Just allow yourself to be wowed by the result:
</p>
</li>
</ul></div>
<div class="imageblock" style="text-align:center;">
<div class="content">
<img src="Week%200_files/iron_solution.png" alt="The Eiffel Tower.">
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_teasers">Teasers</h2>
<div class="sectionbody">
<div class="ulist"><ul>
<li>
<p>
Now, allow yourself to be wowed with what you might accomplish in the next twelve weeks!  Check out <a href="http://www.youtube.com/watch?v=55MuhuzC5Dw">wrdly</a>, a CS50 Final Project written by former students Sierra, Daniel, and Sam.
</p>
</li>
<li>
<p>
<a href="http://courses.cs50.net/">CS50 Courses</a> is a tool for all your course shopping needs!
</p>
</li>
<li>
<p>
For your real shopping needs, check out the <a href="http://market.cs50.net/">CS50 Market</a>!
</p>
</li>
<li>
<p>
<a href="http://cs50.net/2x">CS50 2x</a> is a Chrome extension for watching Harvard iSites videos at double speed.
</p>
</li>
</ul></div>
</div>
</div>
<div class="sect1">
<h2 id="_the_course">The Course</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_lectures">Lectures</h3>
<div class="ulist"><ul>
<li>
<p>
1pm - 2pm (sometimes 2:30pm), Mondays and Wednesdays (sometimes Fridays)
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_simultaneous_enrollment">Simultaneous Enrollment</h3>
<div class="ulist"><ul>
<li>
<p>
Head to <a href="http://cs50.net/petition">http://cs50.net/petition</a> if you want us to support you in your petition to the Ad Board to take a class that conflicts with CS50.
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_sections">Sections</h3>
<div class="ulist"><ul>
<li>
<p>
We offer three distinct tracks for those that are less comfortable, more
 comfortable, and somewhere in between in their already-existing 
knowledge of computer science.
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_problem_sets">Problem Sets</h3>
<div class="ulist"><ul>
<li>
<p>
Problem Sets come in two editions: standard and Hacker. If you want a 
little extra challenge out of these projects, try the Hacker Edition.
</p>
</li>
<li>
<p>
You have late days that will be provided to you for turning in problem sets after the deadline.
</p>
</li>
<li>
<p>
The lowest score of your problem sets will be dropped, as well, but see the syllabus for fine print.
</p>
</li>
<li>
<p>
To give you a sense of where we’re going in the course, check out last year’s problem sets:
</p>
<div class="ulist"><ul>
<li>
<p>
Scratch
</p>
</li>
<li>
<p>
C
</p>
</li>
<li>
<p>
Crypto
</p>
</li>
<li>
<p>
Scramble
</p>
</li>
<li>
<p>
Forensics
</p>
</li>
<li>
<p>
Mispellings
</p>
</li>
<li>
<p>
Huff’n Puff
</p>
</li>
<li>
<p>
C$50 Finance
</p>
</li>
</ul></div>
</li>
<li>
<p>
Two years ago, students implemented <a href="http://shuttle.cs50.net/">CS50 Shuttle</a>, a fun game in which the player transports staff members to various destinations on campus.
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_office_hours">Office Hours</h3>
<div class="ulist"><ul>
<li>
<p>
Held Monday through Thursday, 8pm to 11pm, in the Leverett, Pfoho, Eliot, and Annenberg dining halls.
</p>
</li>
<li>
<p>
This year, we’ll have a new format for office hours featuring a table 
with a few staff members who can host a more intimate conversation.
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_walkthroughs">Walkthroughs</h3>
<div class="ulist"><ul>
<li>
<p>
Zamyla will be releasing weekly videos that literally walk you through 
the problem set.  She will give you hints and starting points for the 
various problems along the way.  Walkthroughs intend to answer the 
question, "Where do I begin?"
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_post_mortems">Post-mortems</h3>
<div class="ulist"><ul>
<li>
<p>
After each problem set, we’ll release short videos that present representative solutions and point out the good and the bad.
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_tutoring">Tutoring</h3>
<div class="ulist"><ul>
<li>
<p>
As resources permit, we’ll pair up staff and students for 1-on-1 assistance.
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_cs50_hackathon">CS50 Hackathon</h3>
<div class="ulist"><ul>
<li>
<p>
The Hackathon gives you a chance to fulfill the programmer stereotype by
 staying up all night coding!  Food and fun will be provided.
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_cs50_fair">CS50 Fair</h3>
<div class="ulist"><ul>
<li>
<p>
The CS50 Fair is your chance to show off your Final Project to all of Harvard!
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_our_mission_statement">Our Mission Statement</h3>
<div class="ulist"><ul>
<li>
<p>
What ultimately matters in this course is not so much where you end up 
relative to your classmates but where you, in Week 12, end up relative 
to yourself in Week 0.
</p>
</li>
</ul></div>
</div>
</div>
</div>
</div>

<div id="footer">
<div id="footer-text">
Last updated 2013-09-07 19:11:30 PDT
</div>
</div>


</body></html>