<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="AsciiDoc 8.6.8">
<title>Week 1, continued</title>
<style type="text/css">
/* Shared CSS for AsciiDoc xhtml11 and html5 backends */

/* Default font. */
body {
  font-family: Georgia,serif;
}

/* Title font. */
h1, h2, h3, h4, h5, h6,
div.title, caption.title,
thead, p.table.header,
#toctitle,
#author, #revnumber, #revdate, #revremark,
#footer {
  font-family: Arial,Helvetica,sans-serif;
}

body {
  margin: 1em 5% 1em 5%;
}

a {
  color: blue;
  text-decoration: underline;
}
a:visited {
  color: fuchsia;
}

em {
  font-style: italic;
  color: navy;
}

strong {
  font-weight: bold;
  color: #083194;
}

h1, h2, h3, h4, h5, h6 {
  color: #527bbd;
  margin-top: 1.2em;
  margin-bottom: 0.5em;
  line-height: 1.3;
}

h1, h2, h3 {
  border-bottom: 2px solid silver;
}
h2 {
  padding-top: 0.5em;
}
h3 {
  float: left;
}
h3 + * {
  clear: left;
}
h5 {
  font-size: 1.0em;
}

div.sectionbody {
  margin-left: 0;
}

hr {
  border: 1px solid silver;
}

p {
  margin-top: 0.5em;
  margin-bottom: 0.5em;
}

ul, ol, li > p {
  margin-top: 0;
}
ul > li     { color: #aaa; }
ul > li > * { color: black; }

.monospaced, code, pre {
  font-family: "Courier New", Courier, monospace;
  font-size: inherit;
  color: navy;
  padding: 0;
  margin: 0;
}


#author {
  color: #527bbd;
  font-weight: bold;
  font-size: 1.1em;
}
#email {
}
#revnumber, #revdate, #revremark {
}

#footer {
  font-size: small;
  border-top: 2px solid silver;
  padding-top: 0.5em;
  margin-top: 4.0em;
}
#footer-text {
  float: left;
  padding-bottom: 0.5em;
}
#footer-badges {
  float: right;
  padding-bottom: 0.5em;
}

#preamble {
  margin-top: 1.5em;
  margin-bottom: 1.5em;
}
div.imageblock, div.exampleblock, div.verseblock,
div.quoteblock, div.literalblock, div.listingblock, div.sidebarblock,
div.admonitionblock {
  margin-top: 1.0em;
  margin-bottom: 1.5em;
}
div.admonitionblock {
  margin-top: 2.0em;
  margin-bottom: 2.0em;
  margin-right: 10%;
  color: #606060;
}

div.content { /* Block element content. */
  padding: 0;
}

/* Block element titles. */
div.title, caption.title {
  color: #527bbd;
  font-weight: bold;
  text-align: left;
  margin-top: 1.0em;
  margin-bottom: 0.5em;
}
div.title + * {
  margin-top: 0;
}

td div.title:first-child {
  margin-top: 0.0em;
}
div.content div.title:first-child {
  margin-top: 0.0em;
}
div.content + div.title {
  margin-top: 0.0em;
}

div.sidebarblock > div.content {
  background: #ffffee;
  border: 1px solid #dddddd;
  border-left: 4px solid #f0f0f0;
  padding: 0.5em;
}

div.listingblock > div.content {
  border: 1px solid #dddddd;
  border-left: 5px solid #f0f0f0;
  background: #f8f8f8;
  padding: 0.5em;
}

div.quoteblock, div.verseblock {
  padding-left: 1.0em;
  margin-left: 1.0em;
  margin-right: 10%;
  border-left: 5px solid #f0f0f0;
  color: #888;
}

div.quoteblock > div.attribution {
  padding-top: 0.5em;
  text-align: right;
}

div.verseblock > pre.content {
  font-family: inherit;
  font-size: inherit;
}
div.verseblock > div.attribution {
  padding-top: 0.75em;
  text-align: left;
}
/* DEPRECATED: Pre version 8.2.7 verse style literal block. */
div.verseblock + div.attribution {
  text-align: left;
}

div.admonitionblock .icon {
  vertical-align: top;
  font-size: 1.1em;
  font-weight: bold;
  text-decoration: underline;
  color: #527bbd;
  padding-right: 0.5em;
}
div.admonitionblock td.content {
  padding-left: 0.5em;
  border-left: 3px solid #dddddd;
}

div.exampleblock > div.content {
  border-left: 3px solid #dddddd;
  padding-left: 0.5em;
}

div.imageblock div.content { padding-left: 0; }
span.image img { border-style: none; }
a.image:visited { color: white; }

dl {
  margin-top: 0.8em;
  margin-bottom: 0.8em;
}
dt {
  margin-top: 0.5em;
  margin-bottom: 0;
  font-style: normal;
  color: navy;
}
dd > *:first-child {
  margin-top: 0.1em;
}

ul, ol {
    list-style-position: outside;
}
ol.arabic {
  list-style-type: decimal;
}
ol.loweralpha {
  list-style-type: lower-alpha;
}
ol.upperalpha {
  list-style-type: upper-alpha;
}
ol.lowerroman {
  list-style-type: lower-roman;
}
ol.upperroman {
  list-style-type: upper-roman;
}

div.compact ul, div.compact ol,
div.compact p, div.compact p,
div.compact div, div.compact div {
  margin-top: 0.1em;
  margin-bottom: 0.1em;
}

tfoot {
  font-weight: bold;
}
td > div.verse {
  white-space: pre;
}

div.hdlist {
  margin-top: 0.8em;
  margin-bottom: 0.8em;
}
div.hdlist tr {
  padding-bottom: 15px;
}
dt.hdlist1.strong, td.hdlist1.strong {
  font-weight: bold;
}
td.hdlist1 {
  vertical-align: top;
  font-style: normal;
  padding-right: 0.8em;
  color: navy;
}
td.hdlist2 {
  vertical-align: top;
}
div.hdlist.compact tr {
  margin: 0;
  padding-bottom: 0;
}

.comment {
  background: yellow;
}

.footnote, .footnoteref {
  font-size: 0.8em;
}

span.footnote, span.footnoteref {
  vertical-align: super;
}

#footnotes {
  margin: 20px 0 20px 0;
  padding: 7px 0 0 0;
}

#footnotes div.footnote {
  margin: 0 0 5px 0;
}

#footnotes hr {
  border: none;
  border-top: 1px solid silver;
  height: 1px;
  text-align: left;
  margin-left: 0;
  width: 20%;
  min-width: 100px;
}

div.colist td {
  padding-right: 0.5em;
  padding-bottom: 0.3em;
  vertical-align: top;
}
div.colist td img {
  margin-top: 0.3em;
}

@media print {
  #footer-badges { display: none; }
}

#toc {
  margin-bottom: 2.5em;
}

#toctitle {
  color: #527bbd;
  font-size: 1.1em;
  font-weight: bold;
  margin-top: 1.0em;
  margin-bottom: 0.1em;
}

div.toclevel0, div.toclevel1, div.toclevel2, div.toclevel3, div.toclevel4 {
  margin-top: 0;
  margin-bottom: 0;
}
div.toclevel2 {
  margin-left: 2em;
  font-size: 0.9em;
}
div.toclevel3 {
  margin-left: 4em;
  font-size: 0.9em;
}
div.toclevel4 {
  margin-left: 6em;
  font-size: 0.9em;
}

span.aqua { color: aqua; }
span.black { color: black; }
span.blue { color: blue; }
span.fuchsia { color: fuchsia; }
span.gray { color: gray; }
span.green { color: green; }
span.lime { color: lime; }
span.maroon { color: maroon; }
span.navy { color: navy; }
span.olive { color: olive; }
span.purple { color: purple; }
span.red { color: red; }
span.silver { color: silver; }
span.teal { color: teal; }
span.white { color: white; }
span.yellow { color: yellow; }

span.aqua-background { background: aqua; }
span.black-background { background: black; }
span.blue-background { background: blue; }
span.fuchsia-background { background: fuchsia; }
span.gray-background { background: gray; }
span.green-background { background: green; }
span.lime-background { background: lime; }
span.maroon-background { background: maroon; }
span.navy-background { background: navy; }
span.olive-background { background: olive; }
span.purple-background { background: purple; }
span.red-background { background: red; }
span.silver-background { background: silver; }
span.teal-background { background: teal; }
span.white-background { background: white; }
span.yellow-background { background: yellow; }

span.big { font-size: 2em; }
span.small { font-size: 0.6em; }

span.underline { text-decoration: underline; }
span.overline { text-decoration: overline; }
span.line-through { text-decoration: line-through; }

div.unbreakable { page-break-inside: avoid; }


/*
 * xhtml11 specific
 *
 * */

div.tableblock {
  margin-top: 1.0em;
  margin-bottom: 1.5em;
}
div.tableblock > table {
  border: 3px solid #527bbd;
}
thead, p.table.header {
  font-weight: bold;
  color: #527bbd;
}
p.table {
  margin-top: 0;
}
/* Because the table frame attribute is overriden by CSS in most browsers. */
div.tableblock > table[frame="void"] {
  border-style: none;
}
div.tableblock > table[frame="hsides"] {
  border-left-style: none;
  border-right-style: none;
}
div.tableblock > table[frame="vsides"] {
  border-top-style: none;
  border-bottom-style: none;
}


/*
 * html5 specific
 *
 * */

table.tableblock {
  margin-top: 1.0em;
  margin-bottom: 1.5em;
}
thead, p.tableblock.header {
  font-weight: bold;
  color: #527bbd;
}
p.tableblock {
  margin-top: 0;
}
table.tableblock {
  border-width: 3px;
  border-spacing: 0px;
  border-style: solid;
  border-color: #527bbd;
  border-collapse: collapse;
}
th.tableblock, td.tableblock {
  border-width: 1px;
  padding: 4px;
  border-style: solid;
  border-color: #527bbd;
}

table.tableblock.frame-topbot {
  border-left-style: hidden;
  border-right-style: hidden;
}
table.tableblock.frame-sides {
  border-top-style: hidden;
  border-bottom-style: hidden;
}
table.tableblock.frame-none {
  border-style: hidden;
}

th.tableblock.halign-left, td.tableblock.halign-left {
  text-align: left;
}
th.tableblock.halign-center, td.tableblock.halign-center {
  text-align: center;
}
th.tableblock.halign-right, td.tableblock.halign-right {
  text-align: right;
}

th.tableblock.valign-top, td.tableblock.valign-top {
  vertical-align: top;
}
th.tableblock.valign-middle, td.tableblock.valign-middle {
  vertical-align: middle;
}
th.tableblock.valign-bottom, td.tableblock.valign-bottom {
  vertical-align: bottom;
}


/*
 * manpage specific
 *
 * */

body.manpage h1 {
  padding-top: 0.5em;
  padding-bottom: 0.5em;
  border-top: 2px solid silver;
  border-bottom: 2px solid silver;
}
body.manpage h2 {
  border-style: none;
}
body.manpage div.sectionbody {
  margin-left: 3em;
}

@media print {
  body.manpage div#toc { display: none; }
}
/*
  pygmentize filter
*/
.highlight .hll { background-color: #ffffcc }
.highlight  { background: #f4f4f4; }
.highlight .c { color: #008800; font-style: italic } /* Comment */
.highlight .err { border: 1px solid #FF0000 } /* Error */
.highlight .k { color: #AA22FF; font-weight: bold } /* Keyword */
.highlight .o { color: #666666 } /* Operator */
.highlight .cm { color: #008800; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #008800 } /* Comment.Preproc */
.highlight .c1 { color: #008800; font-style: italic } /* Comment.Single */
.highlight .cs { color: #008800; font-weight: bold } /* Comment.Special */
.highlight .gd { color: #A00000 } /* Generic.Deleted */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #FF0000 } /* Generic.Error */
.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.highlight .gi { color: #00A000 } /* Generic.Inserted */
.highlight .go { color: #808080 } /* Generic.Output */
.highlight .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.highlight .gt { color: #0040D0 } /* Generic.Traceback */
.highlight .kc { color: #AA22FF; font-weight: bold } /* Keyword.Constant */
.highlight .kd { color: #AA22FF; font-weight: bold } /* Keyword.Declaration */
.highlight .kn { color: #AA22FF; font-weight: bold } /* Keyword.Namespace */
.highlight .kp { color: #AA22FF } /* Keyword.Pseudo */
.highlight .kr { color: #AA22FF; font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #00BB00; font-weight: bold } /* Keyword.Type */
.highlight .m { color: #666666 } /* Literal.Number */
.highlight .s { color: #BB4444 } /* Literal.String */
.highlight .na { color: #BB4444 } /* Name.Attribute */
.highlight .nb { color: #AA22FF } /* Name.Builtin */
.highlight .nc { color: #0000FF } /* Name.Class */
.highlight .no { color: #880000 } /* Name.Constant */
.highlight .nd { color: #AA22FF } /* Name.Decorator */
.highlight .ni { color: #999999; font-weight: bold } /* Name.Entity */
.highlight .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #00A000 } /* Name.Function */
.highlight .nl { color: #A0A000 } /* Name.Label */
.highlight .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.highlight .nt { color: #008000; font-weight: bold } /* Name.Tag */
.highlight .nv { color: #B8860B } /* Name.Variable */
.highlight .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mf { color: #666666 } /* Literal.Number.Float */
.highlight .mh { color: #666666 } /* Literal.Number.Hex */
.highlight .mi { color: #666666 } /* Literal.Number.Integer */
.highlight .mo { color: #666666 } /* Literal.Number.Oct */
.highlight .sb { color: #BB4444 } /* Literal.String.Backtick */
.highlight .sc { color: #BB4444 } /* Literal.String.Char */
.highlight .sd { color: #BB4444; font-style: italic } /* Literal.String.Doc */
.highlight .s2 { color: #BB4444 } /* Literal.String.Double */
.highlight .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
.highlight .sh { color: #BB4444 } /* Literal.String.Heredoc */
.highlight .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
.highlight .sx { color: #008000 } /* Literal.String.Other */
.highlight .sr { color: #BB6688 } /* Literal.String.Regex */
.highlight .s1 { color: #BB4444 } /* Literal.String.Single */
.highlight .ss { color: #B8860B } /* Literal.String.Symbol */
.highlight .bp { color: #AA22FF } /* Name.Builtin.Pseudo */
.highlight .vc { color: #B8860B } /* Name.Variable.Class */
.highlight .vg { color: #B8860B } /* Name.Variable.Global */
.highlight .vi { color: #B8860B } /* Name.Variable.Instance */
.highlight .il { color: #666666 } /* Literal.Number.Integer.Long */



</style>
<script type="text/javascript">
/*<![CDATA[*/
var asciidoc = {  // Namespace.

/////////////////////////////////////////////////////////////////////
// Table Of Contents generator
/////////////////////////////////////////////////////////////////////

/* Author: Mihai Bazon, September 2002
 * http://students.infoiasi.ro/~mishoo
 *
 * Table Of Content generator
 * Version: 0.4
 *
 * Feel free to use this script under the terms of the GNU General Public
 * License, as long as you do not remove or alter this notice.
 */

 /* modified by Troy D. Hanson, September 2006. License: GPL */
 /* modified by Stuart Rackham, 2006, 2009. License: GPL */

// toclevels = 1..4.
toc: function (toclevels) {

  function getText(el) {
    var text = "";
    for (var i = el.firstChild; i != null; i = i.nextSibling) {
      if (i.nodeType == 3 /* Node.TEXT_NODE */) // IE doesn't speak constants.
        text += i.data;
      else if (i.firstChild != null)
        text += getText(i);
    }
    return text;
  }

  function TocEntry(el, text, toclevel) {
    this.element = el;
    this.text = text;
    this.toclevel = toclevel;
  }

  function tocEntries(el, toclevels) {
    var result = new Array;
    var re = new RegExp('[hH]([1-'+(toclevels+1)+'])');
    // Function that scans the DOM tree for header elements (the DOM2
    // nodeIterator API would be a better technique but not supported by all
    // browsers).
    var iterate = function (el) {
      for (var i = el.firstChild; i != null; i = i.nextSibling) {
        if (i.nodeType == 1 /* Node.ELEMENT_NODE */) {
          var mo = re.exec(i.tagName);
          if (mo && (i.getAttribute("class") || i.getAttribute("className")) != "float") {
            result[result.length] = new TocEntry(i, getText(i), mo[1]-1);
          }
          iterate(i);
        }
      }
    }
    iterate(el);
    return result;
  }

  var toc = document.getElementById("toc");
  if (!toc) {
    return;
  }

  // Delete existing TOC entries in case we're reloading the TOC.
  var tocEntriesToRemove = [];
  var i;
  for (i = 0; i < toc.childNodes.length; i++) {
    var entry = toc.childNodes[i];
    if (entry.nodeName.toLowerCase() == 'div'
     && entry.getAttribute("class")
     && entry.getAttribute("class").match(/^toclevel/))
      tocEntriesToRemove.push(entry);
  }
  for (i = 0; i < tocEntriesToRemove.length; i++) {
    toc.removeChild(tocEntriesToRemove[i]);
  }

  // Rebuild TOC entries.
  var entries = tocEntries(document.getElementById("content"), toclevels);
  for (var i = 0; i < entries.length; ++i) {
    var entry = entries[i];
    if (entry.element.id == "")
      entry.element.id = "_toc_" + i;
    var a = document.createElement("a");
    a.href = "#" + entry.element.id;
    a.appendChild(document.createTextNode(entry.text));
    var div = document.createElement("div");
    div.appendChild(a);
    div.className = "toclevel" + entry.toclevel;
    toc.appendChild(div);
  }
  if (entries.length == 0)
    toc.parentNode.removeChild(toc);
},


/////////////////////////////////////////////////////////////////////
// Footnotes generator
/////////////////////////////////////////////////////////////////////

/* Based on footnote generation code from:
 * http://www.brandspankingnew.net/archive/2005/07/format_footnote.html
 */

footnotes: function () {
  // Delete existing footnote entries in case we're reloading the footnodes.
  var i;
  var noteholder = document.getElementById("footnotes");
  if (!noteholder) {
    return;
  }
  var entriesToRemove = [];
  for (i = 0; i < noteholder.childNodes.length; i++) {
    var entry = noteholder.childNodes[i];
    if (entry.nodeName.toLowerCase() == 'div' && entry.getAttribute("class") == "footnote")
      entriesToRemove.push(entry);
  }
  for (i = 0; i < entriesToRemove.length; i++) {
    noteholder.removeChild(entriesToRemove[i]);
  }

  // Rebuild footnote entries.
  var cont = document.getElementById("content");
  var spans = cont.getElementsByTagName("span");
  var refs = {};
  var n = 0;
  for (i=0; i<spans.length; i++) {
    if (spans[i].className == "footnote") {
      n++;
      var note = spans[i].getAttribute("data-note");
      if (!note) {
        // Use [\s\S] in place of . so multi-line matches work.
        // Because JavaScript has no s (dotall) regex flag.
        note = spans[i].innerHTML.match(/\s*\[([\s\S]*)]\s*/)[1];
        spans[i].innerHTML =
          "[<a id='_footnoteref_" + n + "' href='#_footnote_" + n +
          "' title='View footnote' class='footnote'>" + n + "</a>]";
        spans[i].setAttribute("data-note", note);
      }
      noteholder.innerHTML +=
        "<div class='footnote' id='_footnote_" + n + "'>" +
        "<a href='#_footnoteref_" + n + "' title='Return to text'>" +
        n + "</a>. " + note + "</div>";
      var id =spans[i].getAttribute("id");
      if (id != null) refs["#"+id] = n;
    }
  }
  if (n == 0)
    noteholder.parentNode.removeChild(noteholder);
  else {
    // Process footnoterefs.
    for (i=0; i<spans.length; i++) {
      if (spans[i].className == "footnoteref") {
        var href = spans[i].getElementsByTagName("a")[0].getAttribute("href");
        href = href.match(/#.*/)[0];  // Because IE return full URL.
        n = refs[href];
        spans[i].innerHTML =
          "[<a href='#_footnote_" + n +
          "' title='View footnote' class='footnote'>" + n + "</a>]";
      }
    }
  }
},

install: function(toclevels) {
  var timerId;

  function reinstall() {
    asciidoc.footnotes();
    if (toclevels) {
      asciidoc.toc(toclevels);
    }
  }

  function reinstallAndRemoveTimer() {
    clearInterval(timerId);
    reinstall();
  }

  timerId = setInterval(reinstall, 500);
  if (document.addEventListener)
    document.addEventListener("DOMContentLoaded", reinstallAndRemoveTimer, false);
  else
    window.onload = reinstallAndRemoveTimer;
}

}
asciidoc.install(2);
/*]]>*/
</script>
</head>
<body class="article">
<div id="header">
<h1>Week 1, continued</h1>
<span id="author">Andrew Sellergren</span><br>
<div id="toc">
  <div id="toctitle">Table of Contents</div>
  <noscript><p><b>JavaScript must be enabled in your browser to display the table of contents.</b></p></noscript>
<div class="toclevel1"><a href="#_announcements_and_demos">Announcements and Demos</a></div><div class="toclevel1"><a href="#_from_last_time">From Last Time</a></div><div class="toclevel2"><a href="#_code_hello_world_code">hello, world!</a></div><div class="toclevel1"><a href="#_programming_constructs_in_c">Programming Constructs in C</a></div><div class="toclevel2"><a href="#_conditions">Conditions</a></div><div class="toclevel2"><a href="#_boolean_expressions">Boolean Expressions</a></div><div class="toclevel2"><a href="#_switches">Switches</a></div><div class="toclevel2"><a href="#_for_loops">For Loops</a></div><div class="toclevel2"><a href="#_variables">Variables</a></div><div class="toclevel2"><a href="#_functions">Functions</a></div><div class="toclevel1"><a href="#_hellos_and_more">Hellos and More</a></div><div class="toclevel2"><a href="#_code_hello_0_c_code">hello-0.c</a></div><div class="toclevel2"><a href="#_code_hello_1_c_code">hello-1.c</a></div><div class="toclevel2"><a href="#_code_hello_2_c_code">hello-2.c</a></div><div class="toclevel2"><a href="#_code_adder_c_code">adder.c</a></div><div class="toclevel2"><a href="#_code_conditions_0_c_code">conditions-0.c</a></div><div class="toclevel2"><a href="#_code_conditions_1_c_code">conditions-1.c</a></div><div class="toclevel1"><a href="#_teaser">Teaser</a></div></div>
</div>
<div id="content">
<div class="sect1">
<h2 id="_announcements_and_demos">Announcements and Demos</h2>
<div class="sectionbody">
<div class="ulist"><ul>
<li>
<p>
Devices like Google Glass come with an API, an <em>application programming interface</em>,
 that allow developers to write software for it.  For Final Projects, 
we’ll do what we can to hook you up with loaner hardware so that if 
you’re interested in writing, say, an Android or iOS app, you’ll have a 
test device.
</p>
</li>
<li>
<p>
Another such device that comes with an API is Leap Motion.  Check out <a href="http://www.youtube.com/watch?v=_d6KuiuteIA">this video</a> to see how it allows you to control your computer with 3D gestures.
</p>
</li>
<li>
<p>
Section by Friday at noon at <a href="http://cs50.net/section">cs50.net/section</a>.
</p>
</li>
<li>
<p>
One-time supersections will be held this Sunday.  They will be filmed.
</p>
<div class="ulist"><ul>
<li>
<p>
Less comfortable
</p>
<div class="ulist"><ul>
<li>
<p>
Sun 9/15, 2pm, Yenching Auditorium
</p>
</li>
</ul></div>
</li>
<li>
<p>
More comfortable
</p>
<div class="ulist"><ul>
<li>
<p>
Sun 9/15, 4pm, Yenching Auditorium
</p>
</li>
</ul></div>
</li>
</ul></div>
</li>
<li>
<p>
Take advantage of <a href="http://cs50.net/ohs:">Office Hours</a>!
</p>
</li>
<li>
<p>
Problem Set 0 is due on Friday.  This is a day later than the usual 
deadline.  For Problem Set 1, you’ll have the opportunity to extend the 
deadline from Thursday to Friday by completing some warm-up exercises.
</p>
</li>
<li>
<p>
Get the CS50 Appliance at <a href="http://cs50.net/appliance">cs50.net/appliance</a>.  Problem Set 1’s specification will walk you through setting it up.
</p>
</li>
</ul></div>
</div>
</div>
<div class="sect1">
<h2 id="_from_last_time">From Last Time</h2>
<div class="sectionbody">
<div class="ulist"><ul>
<li>
<p>
To translate source code into object code, we used a compiler.  Inside 
your computer, the CPU knows what the 0’s and 1’s actually mean, whether
 it be print, add, subtract, etc.
</p>
</li>
<li>
<p>
We ported our "hello, world" Scratch program to C.
</p>
</li>
</ul></div>
<div class="sect2">
<h3 id="_code_hello_world_code"><code>hello, world!</code></h3>
<div class="ulist"><ul>
<li>
<p>
Let’s begin to tease apart the syntax of our very first C program:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, world</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
The first line that begins with a <code>#</code> is called a <em>preprocessor directive</em>.  In this case, the directive says to include the contents of a file <code>stdio.h</code> inside our program.  Inside of <code>stdio.h</code> is stored the definition of <code>printf</code>.
</p>
</li>
<li>
<p>
<code>int main(void)</code> is the equivalent of the "when green flag 
clicked" puzzle piece in Scratch.  We’ll wave our hands at what it 
actually means for now.
</p>
</li>
<li>
<p>
Next we have open and close curly braces.  These encapsulate related lines of code.
</p>
</li>
<li>
<p>
The interesting line of code in this program is the <code>printf</code> line.  Recall that "hello, world\n" is an example of a <em>string</em>.  The <code>\n</code> is a newline character.
</p>
</li>
<li>
<p>
How would we print out a double quote?  If we simply write a double 
quote inside the two double quotes that enclose our string, the compiler
 will freak out.  We need to <em>escape</em> it using a backslash, so we write <code>\"</code>.
</p>
</li>
</ul></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_programming_constructs_in_c">Programming Constructs in C</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_conditions">Conditions</h3>
<div class="ulist"><ul>
<li>
<p>
Conditions in C look like so:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// do this</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
Note the encapsulation provided by the curly braces again.  The <code>//</code> denotes a comment, a line of English that explains the code.
</p>
</li>
<li>
<p>
A two-way fork in logic looks like this:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// do this</span>
<span class="p">}</span>
<span class="k">else</span>
<span class="p">{</span>
    <span class="c1">// do that</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
A three-way fork in logic looks like this:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// do this</span>
<span class="p">}</span>
<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// do that</span>
<span class="p">}</span>
<span class="k">else</span>
<span class="p">{</span>
    <span class="c1">// do this other thing</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
The quote strings and variables we’ve been passing to <code>printf</code> between the parentheses are known as <em>arguments</em>.  An argument is a value that influences the behavior of the function.
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_boolean_expressions">Boolean Expressions</h3>
<div class="ulist"><ul>
<li>
<p>
The Boolean operators "and" and "or" are written as <code>&amp;&amp;</code> and <code>||</code> in C:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="n">condition</span> <span class="o">&amp;&amp;</span> <span class="n">condition</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// do this</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="n">condition</span> <span class="o">||</span> <span class="n">condition</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// do this</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
Note that <code>&amp;</code> and <code>|</code> have different meaning!
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_switches">Switches</h3>
<div class="ulist"><ul>
<li>
<p>
<em>Switches</em> are another way of implementing forks in logic.  Instead of repeated "else if" blocks, you can handle cases like so:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="k">switch</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">case</span> <span class="mi">1</span>:
        <span class="c1">// do this</span>
        <span class="k">break</span><span class="p">;</span>

    <span class="k">case</span> <span class="mi">2</span>:
        <span class="c1">// do that</span>
        <span class="k">break</span><span class="p">;</span>

    <span class="nl">default:</span>
        <span class="c1">// do this other thing</span>
        <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_for_loops">For Loops</h3>
<div class="ulist"><ul>
<li>
<p>
for loops take the following general structure:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="k">for</span> <span class="p">(</span><span class="n">initializations</span><span class="p">;</span> <span class="n">condition</span><span class="p">;</span> <span class="n">updates</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// do this again and again</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
Within the parentheses after the <code>for</code> keyword, there are 
three parts. Before the first semicolon, we are initializing a variable 
which will be our iterator or counter, often named <code>i</code> by 
convention. Between the two semicolons, we’re providing a condition 
which, if true, will cause another iteration of the loop to be executed.
 Finally, we provide code to update our iterator.
</p>
</li>
<li>
<p>
A snippet of code to print "hello, world!" ten times would look something like:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, world!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
Recall that <code>i++</code> is shorthand for "increment the value of <code>i</code> by 1."  This loop continues executing so long as <code>i &lt; 10</code>, which happens 10 times.
</p>
</li>
<li>
<p>
A while loop is functionally equivalent to a for loop, albeit with 
slightly different syntax.  Consider this code that prints out "hello, 
world!" infinitely:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"hello, world</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
As soon as the condition between the parentheses after <code>while</code> evaluates to false, the loop will terminate.  In this case, however, <code>true</code> will never be false, so the loop continues forever.
</p>
</li>
<li>
<p>
A do while loop executes before checking the condition it depends on.  
That means it will always execute at least once.  The general structure 
is as follows:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="k">do</span>
<span class="p">{</span>
    <span class="c1">// do this again and again</span>
<span class="p">}</span>
<span class="k">while</span> <span class="p">(</span><span class="n">condition</span><span class="p">);</span>
</pre></div></div></div>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_variables">Variables</h3>
<div class="ulist"><ul>
<li>
<p>
Syntactically, declaring a variable looks like so:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="kt">int</span> <span class="n">counter</span><span class="p">;</span>
<span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</pre></div></div></div>
</li>
<li>
<p>
<em>Declaring a variable</em> means asking the computer for some number 
of bits in which to store a value, in this case the value of an integer.
  The second line of code above <em>assigns</em> the value 0 to the variable <code>counter</code>.  <code>=</code> is the assignment operator and instructs the computer to put the right in the left.
</p>
</li>
<li>
<p>
We can do variable declaration and assignment all in one line:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="kt">int</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</pre></div></div></div>
</li>
<li>
<p>
This one is a little easier to read and should be considered best practice.
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_functions">Functions</h3>
<div class="ulist"><ul>
<li>
<p>
A <em>function</em> is a piece of code that can take input and can produce output.  In some cases, a function can be a so-called <em>black box</em>.  This means that the details of its implementation aren’t relevant.  We don’t care <strong>how</strong> it does what it does, just that it does it.
</p>
</li>
<li>
<p>
Let’s represent <code>printf</code> with an actual black box onstage.  We can write "hello, world" on a piece of paper to represent an argument to <code>printf</code>.  We then place this piece of paper in the black box and, by whatever means, the words "hello, world" appear on the screen!
</p>
</li>
<li>
<p>
To make our <code>hello</code> program more dynamic, we asked the user for his or her name and passed that to <code>printf</code>:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="n">GetString</span><span class="p">();</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"hello, %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</pre></div></div></div>
</li>
<li>
<p>
<code>printf</code> doesn’t return anything; it only has the <em>side effect</em> of printing to the screen.  <code>GetString</code>, on the other hand, returns what the user typed in.
</p>
</li>
<li>
<p>
As with <code>printf</code>, we don’t necessarily care how <code>GetString</code>
 is implemented.  We know that when we call it, we’ll be provided with a
 string after some amount of time.  We can simulate this by retrieving 
from the black box a piece of paper with a student’s name (Obasi) 
written on it.  We actually then make a copy of this string before 
storing it in <code>name</code>.
</p>
</li>
<li>
<p>
Now we have <code>name</code> written on one piece of paper which will act as the second argument to <code>printf</code>.
  Next we create the first argument by writing "hello, %s\n" on another 
piece of paper.  Finally, we place these two pieces of paper in the 
black box and magically, "hello, Obasi" appears on the screen.
</p>
</li>
<li>
<p>
Functions that we implemented in the CS50 Library (<code>cs50.h</code>) include:
</p>
<div class="ulist"><ul>
<li>
<p>
<code>GetChar</code>
</p>
</li>
<li>
<p>
<code>GetDouble</code>
</p>
</li>
<li>
<p>
<code>GetFloat</code>
</p>
</li>
<li>
<p>
<code>GetInt</code>
</p>
</li>
<li>
<p>
<code>GetLongLong</code>
</p>
</li>
<li>
<p>
<code>GetString</code>
</p>
</li>
</ul></div>
</li>
<li>
<p>
Convention holds that C function names are lowercase, but we capitalized
 these just to make it clear that they belong to the CS50 Library.
</p>
</li>
<li>
<p>
A float is a number with a decimal point.  A double is a number with a 
decimal point but with more numbers after the decimal point.  These 
types returned by CS50 Library function require different number of bits
 to be stored.  A <code>char</code> requires 8 bits, a <code>float</code> requires 32 bits, and a <code>double</code> requires 64 bits.  A <code>long long</code> is an integer that is twice as big in memory (64 bits) as an <code>int</code> (32 bits).  More on these types later.
</p>
</li>
<li>
<p>
The CS50 Library also contains two custom types:
</p>
<div class="ulist"><ul>
<li>
<p>
<code>bool</code>
</p>
</li>
<li>
<p>
<code>string</code>
</p>
</li>
</ul></div>
</li>
<li>
<p>
For convenience, we have created the symbols <code>true</code> and <code>false</code> to represent 1 and 0.  Likewise for convenience, we have created a <code>string</code> type to store strings.
</p>
</li>
<li>
<p>
The actual types of variables available in C are as follows:
</p>
<div class="ulist"><ul>
<li>
<p>
<code>char</code>
</p>
</li>
<li>
<p>
<code>double</code>
</p>
</li>
<li>
<p>
<code>float</code>
</p>
</li>
<li>
<p>
<code>int</code>
</p>
</li>
<li>
<p>
<code>long long</code>
</p>
</li>
</ul></div>
</li>
<li>
<p>
The <code>printf</code> function can take many different formatting characters. Just a few of them are:
</p>
<div class="ulist"><ul>
<li>
<p>
<code>%c</code> for <code>char</code>
</p>
</li>
<li>
<p>
<code>%i</code> (or <code>%d</code>) for <code>int</code>
</p>
</li>
<li>
<p>
<code>%f</code> for <code>float</code>
</p>
</li>
<li>
<p>
<code>%lld</code> for <code>long long</code>
</p>
</li>
<li>
<p>
<code>%s</code> for <code>string</code>
</p>
</li>
</ul></div>
</li>
<li>
<p>
A few more escape sequences:
</p>
<div class="ulist"><ul>
<li>
<p>
<code>\n</code> for newline
</p>
</li>
<li>
<p>
<code>\r</code> for carriage return (think typewriter)
</p>
</li>
<li>
<p>
<code>\'</code> for single quote
</p>
</li>
<li>
<p>
<code>\"</code> for double quote
</p>
</li>
<li>
<p>
<code>\\</code> for backslash
</p>
</li>
<li>
<p>
<code>\0</code> for null terminator
</p>
</li>
</ul></div>
</li>
</ul></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_hellos_and_more">Hellos and More</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_code_hello_0_c_code"><code>hello-0.c</code></h3>
<div class="ulist"><ul>
<li>
<p>
As before, we’ll open a file in gedit on the Appliance and save it to the <code>jharvard</code> directory.  We’ll call this file <code>hello-0.c</code> and write the following therein:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, world</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
When we type <code>make hello-0</code> in the terminal window at bottom,
 we get all sorts of compiler errors.  At the top of these errors, which
 tend to compound each other, we see:
</p>
<div class="paragraph"><p><code>...implicitly declaring library function 'printf'...</code></p></div>
</li>
<li>
<p>
This error message may seem overwhelming, but try looking for keywords.  Right away we notice <code>printf</code>.  We forgot to include the library that contains the definition of <code>printf</code>:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, world</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_code_hello_1_c_code"><code>hello-1.c</code></h3>
<div class="ulist"><ul>
<li>
<p>
To say hello to the user, we need a variable to store his or her name:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"David"</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
For now, we hardcode the value "David" into the variable <code>name</code>.  This time when we compile (simply hit the up arrow to see previous commands in Linux), we get the following error:
</p>
<div class="paragraph"><p><code>...use of undeclared identifier 'string'</code></p></div>
</li>
<li>
<p>
We need to also include the CS50 Library:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="cp">#include &lt;cs50.h&gt;</span>
<span class="cp">#include &lt;stdio.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"David"</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
Sigh, still more compiler errors.  The topmost one says:
</p>
<div class="paragraph"><p><code>...multi-character character constant...</code></p></div>
</li>
<li>
<p>
That doesn’t help us too much, but <code>clang</code> does point us to 
the problem are with a green caret.  Turns out that in C, strings must 
be delimited by double quotes, not single quotes:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="cp">#include &lt;cs50.h&gt;</span>
<span class="cp">#include &lt;stdio.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"David"</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_code_hello_2_c_code"><code>hello-2.c</code></h3>
<div class="ulist"><ul>
<li>
<p>
Finally, let’s actually accept dynamic input from the user:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="cp">#include &lt;cs50.h&gt;</span>
<span class="cp">#include &lt;stdio.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"State your name: "</span><span class="p">);</span>
    <span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="n">GetString</span><span class="p">();</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
This program compiles and functions correctly for normal names like Rob,
 Lauren, and Joseph.  What about an empty name?  It just prints out 
"hello, "; perhaps we should use a condition and a loop so that we keep 
prompting the user until he provides a non-empty name.
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_code_adder_c_code"><code>adder.c</code></h3>
<div class="ulist"><ul>
<li>
<p>
If we want to ask the user for integer input, we can use the <code>GetInt</code> function:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="cp">#include &lt;cs50.h&gt;</span>
<span class="cp">#include &lt;stdio.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ask user for input</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Give me an integer: "</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">GetInt</span><span class="p">();</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Give me another integer: "</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">GetInt</span><span class="p">();</span>

    <span class="c1">// do the math</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"The sum of %i and %i is %i!</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">);</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
Notice that we don’t need a separate variable to store the sum, we can inline <code>x + y</code>.
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_code_conditions_0_c_code"><code>conditions-0.c</code></h3>
<div class="ulist"><ul>
<li>
<p>
<code>conditions-0.c</code> has a subtle bug in it:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="cp">#include &lt;cs50.h&gt;</span>
<span class="cp">#include &lt;stdio.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ask user for an integer</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"I'd like an integer please: "</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">GetInt</span><span class="p">();</span>

    <span class="c1">// analyze user's input (somewhat inaccurately)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"You picked a positive number!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"You picked a negative number!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
Although this program is syntactically correct (it compiles and runs), 
it is logically incorrect (it declares 0 a negative number).
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_code_conditions_1_c_code"><code>conditions-1.c</code></h3>
<div class="ulist"><ul>
<li>
<p>
To handle the corner case of 0, we need another fork in logic:
</p>
<div class="listingblock">
<div class="content"><div class="highlight"><pre><span class="cp">#include &lt;cs50.h&gt;</span>
<span class="cp">#include &lt;stdio.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ask user for an integer</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"I'd like an integer please: "</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">GetInt</span><span class="p">();</span>

    <span class="c1">// analyze user's input</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"You picked a positive number!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"You picked zero!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"You picked a negative number!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div></div></div>
</li>
<li>
<p>
Note that to test equality, we use <code>==</code>, not <code>=</code>, which is the assignment operator.
</p>
</li>
</ul></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_teaser">Teaser</h2>
<div class="sectionbody">
<div class="ulist"><ul>
<li>
<p>
It turns out that computers cannot express some values perfectly precisely.  The protagonists in the movie <a href="http://www.youtube.com/watch?v=G_wiXgRWrIU">Office Space</a>
 take advantage of this imprecision to rip off their company Initech.  
Consider that if banking software stores a number like 0.1 improperly, 
it could mean that there are fractions of a cent gained or lost.  If you
 haven’t seen Office Space, that’s your homework for the weekend.
</p>
</li>
</ul></div>
</div>
</div>
</div>

<div id="footer">
<div id="footer-text">
Last updated 2013-09-13 22:01:40 PDT
</div>
</div>


</body></html>